)
sum(s24.7) # this is problematic...
oxy.s24 <- oxy.trans[,c(rep(FALSE,7),s24.7)]
rowSums(oxy.s24)
rowMeans(oxy.s24)
oxy.s24 <- oxy[,c(rep(FALSE,7),s24.7)]
rowMeans(oxy.s24)
summary(colMeans(oxy.s24))
sampleMeans.s24 <- rowMeans(oxy.s24)
summary(colMeans(oxy.s24))
summary(sampleMeans.s24)
View(oxy.s24)
which.max(colMeans(oxy.s24))
oxy.s24[,4]
average(oxy.s24[,4])
mean(oxy.s24[,4])
sampleAbund.s24 <- rowsums(oxy.s24)
sampleAbund
sampleAbund.s24 <- rowSums(oxy.s24)
sampleAbund.s24
summary(sampleAbund.s24)
summary(colMeans(oxy.s24))
names(oxy)[7]
names(oxy)[8]
head(sort(colMeans(oxy[8:6248]),descending=T),10)
sort(colMeans(oxy[8:6248]),descending=T)
head(sort(colMeans(oxy[8:6248]),decreasing=T),10)
oxy.taxa[,"denovo776769"]
hist(colMeans(oxy.s24))
head(sort(colMeans(oxy[8:6248]),decreasing=T),10)
hist(log(colMeans(oxy.s24)))
hist(log(10,colMeans(oxy.s24)))
log(10,10)
log(10,100)
log(100,10)
hist(log(colMeans(oxy.s24),10))
library(xlsx)
library(RSQLite)
setwd("~/Documents/Projects/DOD Project Files/qPCR/")
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
getData<-function(x, clones=c("1"="DOD XXX","2"="DOD YYY"),colonies=c("1"="W","2"="Z"),ancestors=c("1"="Anc1","2"="Anc2"),translate=NULL, use=NULL){
sampleNames<-read.xlsx2(x,sheetName="Sample Setup",startRow=8,colIndex=1:11,header=T)
sampleNames$Sample.Name[sampleNames$Sample.Name==""]<-NA
if(!is.null(use)) sampleNames$Sample.Name[! sampleNames$Sample.Name %in% use]<-NA
sampleNames<-na.omit(sampleNames)
sampleNames$Sample.Name <- as.character(sampleNames$Sample.Name)
####
if(is.null(translate)){
dropDOD<-gsub("(.*)(\\s)([1-9].*)","\\3",sampleNames$Sample.Name)
cloneRep<-gsub("(.*)(\\s)(.*)","\\1",dropDOD)
clone<-gsub("([12]+)(-*)(.*)","\\1",cloneRep)
replicate<-gsub("([12]+)(-*)(.*)","\\3",cloneRep)
day<-gsub("(.+)([0-9])$","\\2",dropDOD)
sampleNames$Clone<-clone
sampleNames$Replicate<-replicate
sampleNames$Day<-day
} else{
clone<-translate[sampleNames$Sample.Name,"Clone"]
sampleNames$Clone<-clone
sampleNames$Replicate<-translate[sampleNames$Sample.Name,"Replicate"]
sampleNames$Day<-translate[sampleNames$Sample.Name,"Day"]
}
sampleNames$Clone.Number<-clones[clone]
sampleNames$Colony<-colonies[clone] #these should be values of 1-6
sampleNames$Ancestor<-ancestors[clone] #these should be values of 1-6
pcrData<-read.xlsx2(x,sheetName="Amplification Data",startRow=8,colIndex=1:5,header=T,colClass=c("character","numeric","character","numeric","numeric"))
names(pcrData)[5]<-"X_Rn"
pcrData<-na.omit(pcrData)
pcrData<-merge(pcrData,sampleNames)
#this one drops wells where by the last cycle the fluorescence did not exceed 1
pcrData<-pcrData[! pcrData$Well %in% pcrData[pcrData$Cycle == max(pcrData$Cycle) & pcrData$X_Rn < 1,"Well"], ]
pcrReps<-unique(pcrData[,c("Well","Target.Name","Sample.Name")])
subReps<-unique(pcrData[,c("Target.Name","Sample.Name")])
outReps<-pcrReps[0,]
outReps$qPCRrep<-numeric(0)
for(i in 1:nrow(subReps)){
qReps<-merge(pcrReps,as.data.frame(subReps[i,]))
qReps<-qReps[order(qReps$Well),]
qReps$qPCRrep<-1:nrow(qReps)
outReps<-rbind(outReps,qReps)
}
pcrData<-merge(pcrData,outReps)
pcrData[,c("Well","Target.Name","Sample.Name","Ancestor","Colony","Clone.Number","Day","Replicate","qPCRrep","Cycle","X_Rn")]
}
defaultSetup<-data.frame("Clone"=c(rep("1",7),rep("2",7)),"Replicate"=rep(c("",rep(c("1","2","3"),2)),2),"Day"=rep(c("0","5","5","5","8","8","8"),2))
row.names(defaultSetup)<-c("DOD 1 D0","DOD 1-1 D5","DOD 1-2 D5","DOD 1-3 D5","DOD 1-1 D8","DOD 1-2 D8","DOD 1-3 D8","DOD 2 D0","DOD 2-1 D5","DOD 2-2 D5","DOD 2-3 D5","DOD 2-1 D8","DOD 2-2 D8","DOD 2-3 D8")
View(defaultSetup)
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
View(temp)
unique(temp[,c("Day","Replicate")])
str(temp)
rbind(
c("DOD 1 D0", "71", "1_2", "321", "5"),
c("DOD 1-1 D5", "71", "2_2", "322", "5"),
c("DOD 1-2 D5", "71", "5_2", "325", "0"),
c("DOD 1-3 D5", "72", "1_2", "328", "5"),
c("DOD 1-1 D8", "72", "1_2", "328", "8"),
c("DOD 1-2 D8", "72", "5_2", "331", "5"),
c("DOD 1-3 D8", "73", "3_2", "335", "8"),
c("DOD 2 D0", "74", "3_2", "342", "0"),
c("DOD 2-1 D5", "74", "3_2", "342", "5"),
c("DOD 2-2 D5", "74", "3_2", "342", "8"),
c("DOD 2-3 D5", "75", "1_2", "345", "0"),
c("DOD 2-1 D8", "77", "4_2", "360", "0"),
c("DOD 2-2 D8", "78", "6_2", "368", "5"),
c("DOD 2-3 D8", "182", "4_2", "384", "8")
)
actualNames <- rbind(
c("DOD 1 D0", "71", "1_2", "321", "5"),
c("DOD 1-1 D5", "71", "2_2", "322", "5"),
c("DOD 1-2 D5", "71", "5_2", "325", "0"),
c("DOD 1-3 D5", "72", "1_2", "328", "5"),
c("DOD 1-1 D8", "72", "1_2", "328", "8"),
c("DOD 1-2 D8", "72", "5_2", "331", "5"),
c("DOD 1-3 D8", "73", "3_2", "335", "8"),
c("DOD 2 D0", "74", "3_2", "342", "0"),
c("DOD 2-1 D5", "74", "3_2", "342", "5"),
c("DOD 2-2 D5", "74", "3_2", "342", "8"),
c("DOD 2-3 D5", "75", "1_2", "345", "0"),
c("DOD 2-1 D8", "77", "4_2", "360", "0"),
c("DOD 2-2 D8", "78", "6_2", "368", "5"),
c("DOD 2-3 D8", "182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualNames
actualValues <-data.frame(actualNames[,2:5])
actualNames["Sample.Name"]
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualNames[,"Sample.Name"]
actualValues
actualNames$Replicate <- 1
actualValues$Replicate <- 1
actualValues
actualNames <- rbind(
c("DOD 1 D0", "71", "1_2", "321", "5"),
c("DOD 1-1 D5", "71", "2_2", "322", "5"),
c("DOD 1-2 D5", "71", "5_2", "325", "0"),
c("DOD 1-3 D5", "72", "1_2", "328", "5"),
c("DOD 1-1 D8", "72", "1_2", "328", "8"),
c("DOD 1-2 D8", "72", "5_2", "331", "5"),
c("DOD 1-3 D8", "73", "3_2", "335", "8"),
c("DOD 2 D0", "74", "3_2", "342", "0"),
c("DOD 2-1 D5", "74", "3_2", "342", "5"),
c("DOD 2-2 D5", "74", "3_2", "342", "8"),
c("DOD 2-3 D5", "75", "1_2", "345", "0"),
c("DOD 2-1 D8", "77", "4_2", "360", "0"),
c("DOD 2-2 D8", "78", "6_2", "368", "5"),
c("DOD 2-3 D8", "182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
actualValues
actualValues[temp$Sample.Name[1],]
actualValues[temp$Sample.Name[2],]
actualValues[temp$Sample.Name[4],]
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
View(temp)
actualNames <- rbind(
c("DOD 1 D0", "228", "6_2", "398", "0"),
c("DOD 1-1 D5", "228", "6_2", "398", "5"),
c("DOD 1-2 D5", "232", "2_2", "406", "0"),
c("DOD 1-3 D5", "232", "3_2", "407", "0"),
c("DOD 1-1 D8", "362", "1_2", "426", "0"),
c("DOD 1-2 D8", "362", "3_2", "428", "0"),
c("DOD 1-3 D8", "368", "1_2", "540", "0"),
c("DOD 2 D0", "1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "1489", "1_2", "1528", "8")
)
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
View(actualValues)
actualValues$Replicate <- 1
View(actualValues)
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "228", "6_2", "398", "0"),
c("DOD 1-1 D5", "228", "6_2", "398", "5"),
c("DOD 1-2 D5", "232", "2_2", "406", "0"),
c("DOD 1-3 D5", "232", "3_2", "407", "0"),
c("DOD 1-1 D8", "362", "1_2", "426", "0"),
c("DOD 1-2 D8", "362", "3_2", "428", "0"),
c("DOD 1-3 D8", "368", "1_2", "540", "0"),
c("DOD 2 D0", "1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup)
defaultSetup
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[,1:7])
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
actualNames <- rbind(
c("DOD 1 D0", "DOD 1489", "4_2", "1531", "5"),
c("DOD 1-1 D5", "DOD 1489", "5_2", "1532", "0"),
c("DOD 1-2 D5", "DOD 1489", "6_2", "1533", "0"),
c("DOD 1-3 D5", "DOD 1648", "3_2", "1681", "5"),
c("DOD 1-1 D8", "DOD 1488A", "1_2", "1698", "0"),
c("DOD 1-2 D8", "DOD 365.507", "1_2", "2198", "5"),
c("DOD 1-3 D8", "DOD 365.507", "2_2", "2199", "5")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 71", "1_2", "321", "5"),
c("DOD 1-1 D5", "DOD 71", "2_2", "322", "5"),
c("DOD 1-2 D5", "DOD 71", "5_2", "325", "0"),
c("DOD 1-3 D5", "DOD 72", "1_2", "328", "5"),
c("DOD 1-1 D8", "DOD 72", "1_2", "328", "8"),
c("DOD 1-2 D8", "DOD 72", "5_2", "331", "5"),
c("DOD 1-3 D8", "DOD 73", "3_2", "335", "8"),
c("DOD 2 D0", "DOD 74", "3_2", "342", "0"),
c("DOD 2-1 D5", "DOD 74", "3_2", "342", "5"),
c("DOD 2-2 D5", "DOD 74", "3_2", "342", "8"),
c("DOD 2-3 D5", "DOD 75", "1_2", "345", "0"),
c("DOD 2-1 D8", "DOD 77", "4_2", "360", "0"),
c("DOD 2-2 D8", "DOD 78", "6_2", "368", "5"),
c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### next rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### last rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
actualNames <- rbind(
c("DOD 1 D0", "DOD 1489", "4_2", "1531", "5"),
c("DOD 1-1 D5", "DOD 1489", "5_2", "1532", "0"),
c("DOD 1-2 D5", "DOD 1489", "6_2", "1533", "0"),
c("DOD 1-3 D5", "DOD 1648", "3_2", "1681", "5"),
c("DOD 1-1 D8", "DOD 1642", "1_2", "1698", "0"),
c("DOD 1-2 D8", "DOD 365.507", "1_2", "2198", "5"),
c("DOD 1-3 D8", "DOD 365.507", "2_2", "2199", "5")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
dbDisconnect(con)
unique(temp$Ancestor)
which(is.na(temp$Ancestor))
temp[which(is.na(temp$Ancestor)),]
defaultSetup[1:7,]
unique(temp[,c("Ancestor","Colony")])
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
unique(temp[,c("Ancestor","Colony")])
unique(temp[,c("Ancestor","Colony","Day")])
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 71", "1_2", "321", "5"),
c("DOD 1-1 D5", "DOD 71", "2_2", "322", "5"),
c("DOD 1-2 D5", "DOD 71", "5_2", "325", "0"),
c("DOD 1-3 D5", "DOD 72", "1_2", "328", "5"),
c("DOD 1-1 D8", "DOD 72", "1_2", "328", "8"),
c("DOD 1-2 D8", "DOD 72", "5_2", "331", "5"),
c("DOD 1-3 D8", "DOD 73", "3_2", "335", "8"),
c("DOD 2 D0", "DOD 74", "3_2", "342", "0"),
c("DOD 2-1 D5", "DOD 74", "3_2", "342", "5"),
c("DOD 2-2 D5", "DOD 74", "3_2", "342", "8"),
c("DOD 2-3 D5", "DOD 75", "1_2", "345", "0"),
c("DOD 2-1 D8", "DOD 77", "4_2", "360", "0"),
c("DOD 2-2 D8", "DOD 78", "6_2", "368", "5"),
c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
unique(temp[,c("Ancestor","Colony","Day")])
14+14+7
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
newrows <- rbind(c(3,"",0),c(4,"",0))
rownames(newrows) <- c("DOD 3 D0","DOD 4 D0")
colnames(newrows) <- c("Clone","Replicate","Day")
specialLayout <- rbind(defaultSetup,newrows)
temp<-getData("2015-09-17/2015-08-28 DOD 2115-2116_data plus 2 DOD d0 rerun.xls",
clones=c("1"=paste("DOD",2115),"2"=paste("DOD",2116),"3"=paste("DOD","332_2"),"4"=paste("DOD","406_2")),
colonies=c("1"=1,"2"=2,"3"="6_2","4"="2_2"),
ancestors=c("1"=paste("DOD","XXX"),"2"=paste("DOD","YYY"), "3"="DOD 72", "4"="DOD 232"),
translate=specialLayout)
temp <- temp[temp$Ancestor %in% c("DOD 232", "DOD 72"),]
View(temp)
dbDisconnect(con)
#z is the point to evaluate at
#x is the x data
#y is the y data
#i is index of the polynomial, i.e., L_k=L_i
Lk <- function(z, x, y){
sub <- rep(NA, length(x))
for(i in seq_along(sub)) sub[i]  <- y[i]*prod(z - x[-i]) / prod(x[i] - x[-i])
sum(sub)
}
#v are values to evaluate the polynomial at
#x and y are the data
lagrange  <- function(v,x,y){
if(length(x) != length(y)) return(print("Error: x and y have different lengths."))
Px <- rep(NA, length(v))
v <- sort(v)
for(i in seq_along(v)) Px[i] <- Lk(v[i],x,y)
out <- matrix(c(v, Px), ncol = 2)
out
}
### Book Figure 4.12
plot(lagrange(seq(-8,8,by=0.01), sample(-8:8), rep(0.01,17)), type="l", xlab="x", ylab="y", main = "High Order Approximation", lwd = 2, col="blue")
points(-8:8, rep(0.01,17), col="red", cex=2, pch=20)
plot(lagrange(seq(0,4,by=0.05), c(0, 2, 3, 4), c(7, 11, 28, 63)), type = "l", xlab="x", ylab="y", col="blue", lwd=2)
points(c(0, 2, 3, 4), c(7, 11, 28, 63), col="red", cex=2, pch=20)
reticulate::repl_python()
rnorm(1)
rnorm(5)
reticulate::repl_python()
reticulate::py_install("csaps")
reticulate::repl_python()
.libPaths()
reticulate::repl_python()
reticulate::repl_python()
rng = np.random
reticulate::repl_python()
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
set.seed(15697)
fish_outlier <- fish_noisy
nChanges <- 3
changeMe  <- sample(1:nrow(fish_outlier), nChanges)
CV <- var(fish_outlier$W)/mean(fish_outlier$W)
fish_outlier$W[changeMe] <- fish_outlier$W[changeMe] + rnorm(nChanges,CV)*sample(c(-1,1),nChanges,replace=T)
fish$W - fish_outlier$W #compare our final W to the original W
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
#Model two guesses
guess_2 <- with(fish, mean(W / (l*g^2)))
guess_2_n <- with(fish_noisy, mean(W / (l*g^2)))
guess_2_o <- with(fish_outlier, mean(W / (l*g^2)))
c(guess_1,guess_1_n,guess_1_o)
c(guess_2,guess_2_n,guess_2_o)
critList = [chebyshev, meanAD, medianAD, leastSq, llnorm]
chebyshev
critList = [chebyshev]
junk = [chebyshev]
junk = list([chebyshev])
junk = [np.power, np.exp]
reticulate::repl_python()
set.seed(95839)
x <- rnorm(50)
x <- c(x ,rnorm(3,5,1)) #add in some outliers
mean(x) #not near 0!
var(x)^0.5 #not near 1!
### Let's say we leave ~75% out, see how many possibilities that gives
choose(length(x), length(x)%/%4) #more than enough!!!
## Let's try it
NResamp <- 1000
resample <- replicate(NResamp, sample(x,length(x)%/%4))
hist(colMeans(resample), main = "Resampled Means", xlab = "mean")
quantile(colMeans(resample), c(0.05,0.5,0.95))
hist(diag(var(resample))^0.5, main = "Resample Variances", xlab = "variance")
quantile(diag(var(resample))^0.5, c(0.05,0.5,0.95))
length(x)
53%/%4
choose(53,13)
reticulate::repl_python()
reticulate::repl_python()
RNGkind()
RNGkind("Super-Duper") #switch to the (not so) Super-Duper algorithm
RNGkind()
.Random.seed
set.seed(10)
.Random.seed #look at the current state which we just set
runif(1) #throw a random
.Random.seed #look at the state again
set.seed(10) #set the state back to the start of this cycle
.Random.seed #verify that we have the same state
RNGkind("Mers") #use pattern matching to get us a twister again!
RNGkind()
###  Creating a Mixture Distribution
vals <- c(rnorm(100,0,2), rnorm(100,10,3), rnorm(100,20,5))
hist(vals,30, freq = F,col="red")
CDF <- ecdf(vals)
rands <- unname(quantile(CDF, runif(2000)))
hist(rands,30,col=rgb(0,0,1,0.2), add=T, freq = F)
legend("topright", c("Mixture Sample", "eCDF Sample"), fill = c("red",rgb(0,0,1,0.2)))
reticulate::repl_python()
xVals <- seq(0,2*pi,length=200)
plot(xVals, 1/(6*pi)*(-cos(xVals) +1 + 3*xVals), type = "l", main = "CDF", xlab = "x", ylab = "quantile")
inverse <- function(y) uniroot(function(x) 1/(6*pi)*(-cos(x) +1 + 3*x) - y, lower = 0, upper = 2*pi)$root
inverse(0.75)
qVals <-seq(0,1,by=0.01)
plot(qVals,sapply(qVals, inverse), type = "l", main = "Numerical Inverse CDF", ylab = "x", xlab = "quantile")
rands <- sapply(runif(100000),inverse)
hist(rands, 50)
reticulate::repl_python()
## Multinomial
elections <- 100
winner <- sample(c("Bob","Tom","Jane"), elections, replace = T, prob = c(5,1,8))
table(winner)/elections
elections <- 100
NSamples <- 30
winner <- sample(c("Bob","Tom","Jane"), elections*NSamples, replace = T, prob = c(5,1,8))
Winner <- matrix(winner, ncol = NSamples)
rowMeans(apply(Winner,2,table)/100) #Average winning percentage
diag(var(t(apply(Winner,2,table)/100)))^0.5 #SD in winning percentage
set.seed(95839)
x <- rnorm(50)
x <- c(x ,rnorm(3,5,1)) #add in some outliers
mean(x) #not near 0!
var(x)^0.5 #not near 1!
### Let's say we leave ~75% out, see how many possibilities that gives
choose(length(x), length(x)%/%4) #more than enough!!!
## Let's try it
NResamp <- 1000
resample <- replicate(NResamp, sample(x,length(x)%/%4))
hist(colMeans(resample), main = "Resampled Means", xlab = "mean")
quantile(colMeans(resample), c(0.05,0.5,0.95))
hist(diag(var(resample))^0.5, main = "Resample Variances", xlab = "variance")
quantile(diag(var(resample))^0.5, c(0.05,0.5,0.95))
resample <- replicate(NResamp, sample(x, replace = T))
hist(colMeans(resample), main = "Resampled Means", xlab = "mean")
quantile(colMeans(resample), c(0.05,0.5,0.95))
hist(diag(var(resample))^0.5, main = "Resample Variances", xlab = "variance")
quantile(diag(var(resample))^0.5, c(0.05,0.5,0.95))
reticulate::repl_python()
