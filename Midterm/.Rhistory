guess<-c(.02,.5)
objectiveFn<-function(guess,xvals,yvals,dist="medianAD"){
N<-70
S0<-1
time<-1:50
sleep.data<-data.frame(tired=rep(NA,length(time)),
sleeping=rep(NA,length(time)),
awake=rep(0,length(time)))
sleep.data[1,]<-c(N-S0,S0,0)
prop.const<-guess[1]
l<-guess[2]
for(t in time){
if(sleep.data[t,2]<0){
# sleep.data[t,2]<-0
sleep.data[t:length(time),]<-sleep.data[t,]
break()
}
if(t<15){
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
sleep.data[t+1,]<-c(tired,asleep,0)
}
else{
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]-l*sleep.data[(t-14),2]
awake<-sleep.data[t,3]+l*sleep.data[(t-14),2]
sleep.data[t+1,]<-c(tired,asleep,awake)
}
}# end of time
yhat<-sleep.data[xvals,2] # predicted number asleep at a point
eval(call(dist,yvals,yhat))
}# end of function
medianADFit2<-optim(guess,objectiveFn, xvals=sleepers[,1],
yvals=sleepers[,2],dist="medianAD",lower=c(0,0),upper=c(.1,1))
medianADFit2$par
plot.sleep(medianADFit2$par[1],medianADFit2$par[2])
chebyFit2<-optim(guess,objectiveFn, xvals=sleepers[,1],
yvals=sleepers[,2],dist="chebyshev",lower=c(0,0),upper=c(.1,1))
chebyFit2$par
plot.sleep(chebyFit2$par[1],chebyFit2$par[2])
# plot.sleep(0.02,.05)
par(mfrow=c(1,2))
plot.sleep(medianADFit2$par[1],medianADFit2$par[2],time=1:150)
plot.sleep(chebyFit2$par[1],chebyFit2$par[2],time=1:1000)
# set.seed(3435)
# n hroth attack
Hroth.attack<-function(n=1){
damages<-rep(0,n)
for(i in 1:n){
roll1<-sample(1:20,1)
damage<-0
if(roll1>11){
damage<-sample(1:6,1)
if(roll1>17){
damage<-damage*2
}
}
damages[i]<-damage
}
damages
}
# n grim attack
Grim.attack<-function(n=1){
damages<-rep(0,n)
for(i in 1:n){
roll1<-sample(1:10,1)
damage<-0
if(roll1>6){
damage<-sum(sample(1:4,2,replace = T))
}
damages[i]<-damage
}
damages
}
n<-1000
# Making my ecdfs
Hroth.attack.CDF<-ecdf(Hroth.attack(n))
rands<-unname(quantile(Hroth.attack.CDF,runif(n)))
hist(rands,main=paste(n,"Damages done by Hrothgar"),breaks=12)
## making data for ecdf
Grim.attack.CDF<-ecdf(Grim.attack(n))
rands<-unname(quantile(Grim.attack.CDF,runif(n)))
hist(rands,main=paste(n,"damages done by Grimweard"),breaks = 8)
set.seed(3000)
Battle<-function(nbattles){
score<-rep(NA,nbattles) # 1 if Hrothgar wins 0 if Grimweard
nturn.record<-rep(NA,nbattles)
for(i in 1:nbattles){
H.hp<-25
G.hp<-15
initiative<-sample(c(0,1),1)
nturns<-0
while(G.hp>0 && H.hp>0 && nturns<3000){
if(initiative==1){# Hrothgar goes first
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
}else{# Grimweard goes first
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
}
nturns<-nturns+1
} # end of battle i
if(is.na(score[i]) && initiative==1 && nturns<3000){score[i]<-0}
if(is.na(score[i]) && initiative==0 && nturns<3000){score[i]<-1}
nturn.record[i]<-nturns
} # end of n battles
data.frame(score,nturn.record)
}
matches<-Battle(1000)
print(paste("The percent of battles that Hrothgar won was:",mean(matches[,1])*100,"in the 1000 battles I ran"))
# mean(matches[,1])
index<-which(matches[,1]==1)
xbar<-mean(matches[index,2])
se<-sd(matches[index,2])/sqrt(length(matches[index,2]))
print(paste("The Mean number of turns it took Hrothgar to defeat Grimweard was:",xbar,"With a 95% confidence interval of (",xbar-1.96*se,",",xbar+1.96*se,")"))
med<-median(matches[index,2])
# use bootstrap to find 95% confidence interval for median?
nboot<-1000
med.vals<-rep(NA,nboot)
for(i in 1:nboot){
med.vals[i]<-median(sample(matches[index,2],replace=T))
}
med.vals<-sort(med.vals)
print(paste("The median number of turns it took Hrothgar to defeat Grimweard was:",med,"With a 95% confidence interval of (",med.vals[25],",",med.vals[975],")"))
index<-which(matches[,1]==0)
xbar<-mean(matches[index,2])
se<-sd(matches[index,2])/sqrt(length(matches[index,2]))
print(paste("The Mean number of turns it took Grimweard to defeat Hrothgar was:",xbar,"With a 95% confidence interval of (",xbar-1.96*se,",",xbar+1.96*se,")"))
med<-median(matches[index,2])
# use bootstrap to find 95% confidence interval for median?
nboot<-1000
med.vals<-rep(NA,nboot)
for(i in 1:nboot){
med.vals[i]<-median(sample(matches[index,2],replace=T))
}
med.vals<-sort(med.vals)
print(paste("The median number of turns it took Grimweard to defeat Hrothgar was:",med,"With a 95% confidence interval of (",med.vals[25],",",med.vals[975],")"))
Battle.flee<-function(nbattles,threshold=4){
score<-rep(NA,nbattles) # 1 if Hrothgar wins 0 if Grimweard
nturn.record<-rep(NA,nbattles)
for(i in 1:nbattles){
H.hp<-25
G.hp<-15
initiative<-sample(c(0,1),1)
nturns<-0
while(is.na(score[i]) && nturns<3000){
if(initiative==1){# Hrothgar goes first
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}else{
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}
}
}else{# Grimweard goes first
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}else{
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}
}
}
if(H.hp<threshold){ # uh oh time to flee
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-3}else{ score[i]<-2}
}
nturns<-nturns+1
} # end of battle i
nturn.record[i]<-nturns
} # end of n battles
data.frame(score,nturn.record)
}
set.seed(34234)
thresholds<-c(1:10)
nbattle<-1000
results<-data.frame(matrix(rep(NA,3*length(thresholds)),nrow=3))
colnames(results)<-thresholds
rownames(results)<-c("Winrate","Flee.survive","Alive")
for(i in thresholds){
matches<-Battle.flee(nbattle,i)
winrate<-sum(matches[,1]==1)/nbattle
survrate<-sum(matches[,1]==2)/(sum(matches[,1]==2)+sum(matches[,1]==3))
live<-(sum(matches[,1]==1)+sum(matches[,1]==2))/nbattle
results[,i]<-c(winrate,survrate,live)
}
results
plot(unlist(results[3,])~thresholds,ylab="% chance of surviving")
x<-.5
2*((x-1)*(x-2))/(((-1)*(-2)))+5*((x-0)*(x-2))/(1*(-1))+(x*(x-1))/(2)
# I think that would look something like
inverse<-function(p)uniroot(function(x) 1/6*x^2-1/2*x+1/3-p, lower=2,upper=4)$root
library(ggplot2)
N<-70
S0<-1
time<-1:50
prop.consts<-c(.01,.02,.05)
sleep.maxes<-rep(NA,3)
for(prop.const in prop.consts){
sleep.data<-data.frame(tired=rep(NA,length(time)),sleeping=rep(NA,length(time)),
awake=rep(0,length(time)))
sleep.data[1,]<-c(N-S0,S0,0)
for(t in time){
if(sleep.data[t,2]<0){
# sleep.data[t,2]<-0
sleep.data[t:length(time),]<-sleep.data[t,]
break()
}
if(t<15){
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
sleep.data[t+1,]<-c(tired,asleep,0)
}
else{
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]-sleep.data[(t-14),2]
awake<-sleep.data[t,3]+sleep.data[(t-14),2]
sleep.data[t+1,]<-c(tired,asleep,awake)
}
}
g<-ggplot(sleep.data,aes(x=time,y=tired))+
geom_line(col="green")+
geom_line(aes(y=sleeping),col="red")+
geom_line(aes(y=awake),col="blue")+
ggtitle(label=paste("Proportionality constant:",prop.const))
plot(g)
sleep.maxes[which(prop.const==prop.consts)]<-which.max(sleep.data[,2])
print(paste("Number of people who fell asleep:",(sleep.data[50,3])))
}
sleep.maxes
sleepers <- data.frame(Minutes = c(5, 7, 10, 12, 14, 16, 18, 20, 21, 23, 25, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 44, 46, 48), Asleep = c(2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8))
knitr::kable(sleepers)
medianAD<-function(y,yhat) median(abs(y-yhat))
diff.eq.obj.fn<-function(prop.const,xvals,yvals,dist="medianAD"){
N<-70
S0<-1
time<-1:50
sleep.data<-data.frame(tired=rep(NA,length(time)),
sleeping=rep(NA,length(time)),
awake=rep(0,length(time)))
sleep.data[1,]<-c(N-S0,S0,0)
for(t in time){
if(sleep.data[t,2]<0){
# sleep.data[t,2]<-0
sleep.data[t:length(time),]<-sleep.data[t,]
break()
}
if(t<15){
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
sleep.data[t+1,]<-c(tired,asleep,0)
}
else{
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]-sleep.data[(t-14),2]
awake<-sleep.data[t,3]+sleep.data[(t-14),2]
sleep.data[t+1,]<-c(tired,asleep,awake)
}
}# end of time
yhat<-sleep.data[xvals,2] # predicted number asleep at a point
eval(call(dist,yvals,yhat))
}# end of function
# choose guess for proportionality constant
guess<-.02
# run optim
medianADFit<-optim(guess,diff.eq.obj.fn, xvals=sleepers[,1],
yvals=sleepers[,2],dist="medianAD",
method="Brent",lower=0,upper=.1)
medianADFit$par
chebyshev<-function(y,yhat) max(abs(y-yhat))
llpois<-function(y,yhat) sum(dpois(y,yhat,log = T))
chebyFit<-optim(guess,diff.eq.obj.fn, xvals=sleepers[,1],yvals=sleepers[,2],
dist="chebyshev",method="Brent",lower=0,upper=.1)
chebyFit$par
poisFit<-optim(guess,diff.eq.obj.fn, xvals=sleepers[,1],yvals=sleepers[,2],
dist="llpois",method="Brent",lower=0,upper=.1,
control=list(fnscale=-1))
poisFit$par
# not sure what's going wrong with poisson
# so I'm just going to leave it for now
# it's just choosing constant right below upper limit
# warning hidden to save space:
# Warning in dpois(y, yhat, log = T) : NaNs produced
# Warning in optimize(function(par) fn(par, ...)/con$fnscale, lower = lower,  :
#   NA/Inf replaced by maximum positive value
prop.consts<-c(medianADFit$par,chebyFit$par,poisFit$par)
plot.sleep<-function(prop.consts,ls=c(1),time=1:50){
N<-70
S0<-1
sleep.maxes<-rep(NA,3)
for(l in ls){
for(prop.const in prop.consts){
sleep.data<-data.frame(tired=rep(NA,length(time)),
sleeping=rep(NA,length(time)),
awake=rep(0,length(time)))
sleep.data[1,]<-c(N-S0,S0,0)
for(t in time[-length(time)]){
if(sleep.data[t,2]<0){
# sleep.data[t,2]<-0
sleep.data[t:length(time),]<-sleep.data[t,]
break()
}
if(t<15){
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
sleep.data[t+1,]<-c(tired,asleep,0)
}
else{
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]-l*sleep.data[(t-14),2]
awake<-sleep.data[t,3]+l*sleep.data[(t-14),2]
sleep.data[t+1,]<-c(tired,asleep,awake)
}
}
plot(sleep.data[,1]~time,type="l",col="green",ylim=c(-10,80),
ylab="number of students",xlab="time")
lines(sleep.data[,2]~time,type="l",col="red")
lines(sleep.data[,3]~time,type="l",col="blue")
points(sleepers[,2]~sleepers[,1])
legend(x="topright",legend = c("Tired","Asleep","Awake"),
col=c("green","red","blue"),lty=1)
# sleep.maxes[which(prop.const==prop.consts)]<-which.max(sleep.data[,2])
# print(paste("Number of people who fell asleep:",(sleep.data[50,3])))
}
}
}
plot.sleep(prop.consts)
guess<-c(.02,.5)
objectiveFn<-function(guess,xvals,yvals,dist="medianAD"){
N<-70
S0<-1
time<-1:50
sleep.data<-data.frame(tired=rep(NA,length(time)),
sleeping=rep(NA,length(time)),
awake=rep(0,length(time)))
sleep.data[1,]<-c(N-S0,S0,0)
prop.const<-guess[1]
l<-guess[2]
for(t in time){
if(sleep.data[t,2]<0){
# sleep.data[t,2]<-0
sleep.data[t:length(time),]<-sleep.data[t,]
break()
}
if(t<15){
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
sleep.data[t+1,]<-c(tired,asleep,0)
}
else{
tired<-sleep.data[t,1]-prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]
asleep<-sleep.data[t,2]+prop.const*sqrt(sleep.data[t,2]/N)*sleep.data[t,1]-l*sleep.data[(t-14),2]
awake<-sleep.data[t,3]+l*sleep.data[(t-14),2]
sleep.data[t+1,]<-c(tired,asleep,awake)
}
}# end of time
yhat<-sleep.data[xvals,2] # predicted number asleep at a point
eval(call(dist,yvals,yhat))
}# end of function
medianADFit2<-optim(guess,objectiveFn, xvals=sleepers[,1],
yvals=sleepers[,2],dist="medianAD",lower=c(0,0),upper=c(.1,1))
medianADFit2$par
plot.sleep(medianADFit2$par[1],medianADFit2$par[2])
chebyFit2<-optim(guess,objectiveFn, xvals=sleepers[,1],
yvals=sleepers[,2],dist="chebyshev",lower=c(0,0),upper=c(.1,1))
chebyFit2$par
plot.sleep(chebyFit2$par[1],chebyFit2$par[2])
# plot.sleep(0.02,.05)
par(mfrow=c(1,2))
plot.sleep(medianADFit2$par[1],medianADFit2$par[2],time=1:150)
plot.sleep(chebyFit2$par[1],chebyFit2$par[2],time=1:1000)
# set.seed(3435)
# n hroth attack
Hroth.attack<-function(n=1){
damages<-rep(0,n)
for(i in 1:n){
roll1<-sample(1:20,1)
damage<-0
if(roll1>11){
damage<-sample(1:6,1)
if(roll1>17){
damage<-damage*2
}
}
damages[i]<-damage
}
damages
}
# n grim attack
Grim.attack<-function(n=1){
damages<-rep(0,n)
for(i in 1:n){
roll1<-sample(1:10,1)
damage<-0
if(roll1>6){
damage<-sum(sample(1:4,2,replace = T))
}
damages[i]<-damage
}
damages
}
n<-1000
# Making my ecdfs
Hroth.attack.CDF<-ecdf(Hroth.attack(n))
rands<-unname(quantile(Hroth.attack.CDF,runif(n)))
hist(rands,main=paste(n,"Damages done by Hrothgar"),breaks=12)
## making data for ecdf
Grim.attack.CDF<-ecdf(Grim.attack(n))
rands<-unname(quantile(Grim.attack.CDF,runif(n)))
hist(rands,main=paste(n,"damages done by Grimweard"),breaks = 8)
index<-which(matches[,1]==1)
xbar<-mean(matches[index,2])
se<-sd(matches[index,2])/sqrt(length(matches[index,2]))
print(paste("The Mean number of turns it took Hrothgar to defeat Grimweard was:",xbar,"With a 95% confidence interval of (",xbar-1.96*se,",",xbar+1.96*se,")"))
med<-median(matches[index,2])
# use bootstrap to find 95% confidence interval for median?
nboot<-1000
med.vals<-rep(NA,nboot)
for(i in 1:nboot){
med.vals[i]<-median(sample(matches[index,2],replace=T))
}
med.vals<-sort(med.vals)
print(paste("The median number of turns it took Hrothgar to defeat Grimweard was:",med,"With a 95% confidence interval of (",med.vals[25],",",med.vals[975],")"))
set.seed(3000)
Battle<-function(nbattles){
score<-rep(NA,nbattles) # 1 if Hrothgar wins 0 if Grimweard
nturn.record<-rep(NA,nbattles)
for(i in 1:nbattles){
H.hp<-25
G.hp<-15
initiative<-sample(c(0,1),1)
nturns<-0
while(G.hp>0 && H.hp>0 && nturns<3000){
if(initiative==1){# Hrothgar goes first
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
}else{# Grimweard goes first
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
}
nturns<-nturns+1
} # end of battle i
if(is.na(score[i]) && initiative==1 && nturns<3000){score[i]<-0}
if(is.na(score[i]) && initiative==0 && nturns<3000){score[i]<-1}
nturn.record[i]<-nturns
} # end of n battles
data.frame(score,nturn.record)
}
matches<-Battle(1000)
print(paste("The percent of battles that Hrothgar won was:",mean(matches[,1])*100,"in the 1000 battles I ran"))
# mean(matches[,1])
index<-which(matches[,1]==0)
xbar<-mean(matches[index,2])
se<-sd(matches[index,2])/sqrt(length(matches[index,2]))
print(paste("The Mean number of turns it took Grimweard to defeat Hrothgar was:",xbar,"With a 95% confidence interval of (",xbar-1.96*se,",",xbar+1.96*se,")"))
med<-median(matches[index,2])
# use bootstrap to find 95% confidence interval for median?
nboot<-1000
med.vals<-rep(NA,nboot)
for(i in 1:nboot){
med.vals[i]<-median(sample(matches[index,2],replace=T))
}
med.vals<-sort(med.vals)
print(paste("The median number of turns it took Grimweard to defeat Hrothgar was:",med,"With a 95% confidence interval of (",med.vals[25],",",med.vals[975],")"))
Battle.flee<-function(nbattles,threshold=4){
score<-rep(NA,nbattles) # 1 if Hrothgar wins 0 if Grimweard
nturn.record<-rep(NA,nbattles)
for(i in 1:nbattles){
H.hp<-25
G.hp<-15
initiative<-sample(c(0,1),1)
nturns<-0
while(is.na(score[i]) && nturns<3000){
if(initiative==1){# Hrothgar goes first
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}else{
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}
}
}else{# Grimweard goes first
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-0}else{
G.hp<-G.hp-unname(quantile(Hroth.attack.CDF,runif(1)))
if(G.hp<=0){score[i]<-1}
}
}
if(H.hp<threshold){ # uh oh time to flee
H.hp<-H.hp-unname(quantile(Grim.attack.CDF,runif(1)))
if(H.hp<=0){score[i]<-3}else{ score[i]<-2}
}
nturns<-nturns+1
} # end of battle i
nturn.record[i]<-nturns
} # end of n battles
data.frame(score,nturn.record)
}
set.seed(34234)
thresholds<-c(1:10)
nbattle<-1000
results<-data.frame(matrix(rep(NA,3*length(thresholds)),nrow=3))
colnames(results)<-thresholds
rownames(results)<-c("Winrate","Flee.survive","Alive")
for(i in thresholds){
matches<-Battle.flee(nbattle,i)
winrate<-sum(matches[,1]==1)/nbattle
survrate<-sum(matches[,1]==2)/(sum(matches[,1]==2)+sum(matches[,1]==3))
live<-(sum(matches[,1]==1)+sum(matches[,1]==2))/nbattle
results[,i]<-c(winrate,survrate,live)
}
results
x<-.5
2*((x-1)*(x-2))/(((-1)*(-2)))+5*((x-0)*(x-2))/(1*(-1))+(x*(x-1))/(2)
