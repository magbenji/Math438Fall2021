c("DOD 2-2 D5", "74", "3_2", "342", "8"),
c("DOD 2-3 D5", "75", "1_2", "345", "0"),
c("DOD 2-1 D8", "77", "4_2", "360", "0"),
c("DOD 2-2 D8", "78", "6_2", "368", "5"),
c("DOD 2-3 D8", "182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualNames
actualValues <-data.frame(actualNames[,2:5])
actualNames["Sample.Name"]
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualNames[,"Sample.Name"]
actualValues
actualNames$Replicate <- 1
actualValues$Replicate <- 1
actualValues
actualNames <- rbind(
c("DOD 1 D0", "71", "1_2", "321", "5"),
c("DOD 1-1 D5", "71", "2_2", "322", "5"),
c("DOD 1-2 D5", "71", "5_2", "325", "0"),
c("DOD 1-3 D5", "72", "1_2", "328", "5"),
c("DOD 1-1 D8", "72", "1_2", "328", "8"),
c("DOD 1-2 D8", "72", "5_2", "331", "5"),
c("DOD 1-3 D8", "73", "3_2", "335", "8"),
c("DOD 2 D0", "74", "3_2", "342", "0"),
c("DOD 2-1 D5", "74", "3_2", "342", "5"),
c("DOD 2-2 D5", "74", "3_2", "342", "8"),
c("DOD 2-3 D5", "75", "1_2", "345", "0"),
c("DOD 2-1 D8", "77", "4_2", "360", "0"),
c("DOD 2-2 D8", "78", "6_2", "368", "5"),
c("DOD 2-3 D8", "182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
actualValues
actualValues[temp$Sample.Name[1],]
actualValues[temp$Sample.Name[2],]
actualValues[temp$Sample.Name[4],]
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
View(temp)
actualNames <- rbind(
c("DOD 1 D0", "228", "6_2", "398", "0"),
c("DOD 1-1 D5", "228", "6_2", "398", "5"),
c("DOD 1-2 D5", "232", "2_2", "406", "0"),
c("DOD 1-3 D5", "232", "3_2", "407", "0"),
c("DOD 1-1 D8", "362", "1_2", "426", "0"),
c("DOD 1-2 D8", "362", "3_2", "428", "0"),
c("DOD 1-3 D8", "368", "1_2", "540", "0"),
c("DOD 2 D0", "1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "1489", "1_2", "1528", "8")
)
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
View(actualValues)
actualValues$Replicate <- 1
View(actualValues)
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "228", "6_2", "398", "0"),
c("DOD 1-1 D5", "228", "6_2", "398", "5"),
c("DOD 1-2 D5", "232", "2_2", "406", "0"),
c("DOD 1-3 D5", "232", "3_2", "407", "0"),
c("DOD 1-1 D8", "362", "1_2", "426", "0"),
c("DOD 1-2 D8", "362", "3_2", "428", "0"),
c("DOD 1-3 D8", "368", "1_2", "540", "0"),
c("DOD 2 D0", "1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup)
defaultSetup
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[,1:7])
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
actualNames <- rbind(
c("DOD 1 D0", "DOD 1489", "4_2", "1531", "5"),
c("DOD 1-1 D5", "DOD 1489", "5_2", "1532", "0"),
c("DOD 1-2 D5", "DOD 1489", "6_2", "1533", "0"),
c("DOD 1-3 D5", "DOD 1648", "3_2", "1681", "5"),
c("DOD 1-1 D8", "DOD 1488A", "1_2", "1698", "0"),
c("DOD 1-2 D8", "DOD 365.507", "1_2", "2198", "5"),
c("DOD 1-3 D8", "DOD 365.507", "2_2", "2199", "5")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 71", "1_2", "321", "5"),
c("DOD 1-1 D5", "DOD 71", "2_2", "322", "5"),
c("DOD 1-2 D5", "DOD 71", "5_2", "325", "0"),
c("DOD 1-3 D5", "DOD 72", "1_2", "328", "5"),
c("DOD 1-1 D8", "DOD 72", "1_2", "328", "8"),
c("DOD 1-2 D8", "DOD 72", "5_2", "331", "5"),
c("DOD 1-3 D8", "DOD 73", "3_2", "335", "8"),
c("DOD 2 D0", "DOD 74", "3_2", "342", "0"),
c("DOD 2-1 D5", "DOD 74", "3_2", "342", "5"),
c("DOD 2-2 D5", "DOD 74", "3_2", "342", "8"),
c("DOD 2-3 D5", "DOD 75", "1_2", "345", "0"),
c("DOD 2-1 D8", "DOD 77", "4_2", "360", "0"),
c("DOD 2-2 D8", "DOD 78", "6_2", "368", "5"),
c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### next rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### last rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
actualNames <- rbind(
c("DOD 1 D0", "DOD 1489", "4_2", "1531", "5"),
c("DOD 1-1 D5", "DOD 1489", "5_2", "1532", "0"),
c("DOD 1-2 D5", "DOD 1489", "6_2", "1533", "0"),
c("DOD 1-3 D5", "DOD 1648", "3_2", "1681", "5"),
c("DOD 1-1 D8", "DOD 1642", "1_2", "1698", "0"),
c("DOD 1-2 D8", "DOD 365.507", "1_2", "2198", "5"),
c("DOD 1-3 D8", "DOD 365.507", "2_2", "2199", "5")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
dbDisconnect(con)
unique(temp$Ancestor)
which(is.na(temp$Ancestor))
temp[which(is.na(temp$Ancestor)),]
defaultSetup[1:7,]
unique(temp[,c("Ancestor","Colony")])
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
unique(temp[,c("Ancestor","Colony")])
unique(temp[,c("Ancestor","Colony","Day")])
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 71", "1_2", "321", "5"),
c("DOD 1-1 D5", "DOD 71", "2_2", "322", "5"),
c("DOD 1-2 D5", "DOD 71", "5_2", "325", "0"),
c("DOD 1-3 D5", "DOD 72", "1_2", "328", "5"),
c("DOD 1-1 D8", "DOD 72", "1_2", "328", "8"),
c("DOD 1-2 D8", "DOD 72", "5_2", "331", "5"),
c("DOD 1-3 D8", "DOD 73", "3_2", "335", "8"),
c("DOD 2 D0", "DOD 74", "3_2", "342", "0"),
c("DOD 2-1 D5", "DOD 74", "3_2", "342", "5"),
c("DOD 2-2 D5", "DOD 74", "3_2", "342", "8"),
c("DOD 2-3 D5", "DOD 75", "1_2", "345", "0"),
c("DOD 2-1 D8", "DOD 77", "4_2", "360", "0"),
c("DOD 2-2 D8", "DOD 78", "6_2", "368", "5"),
c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
unique(temp[,c("Ancestor","Colony","Day")])
14+14+7
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
newrows <- rbind(c(3,"",0),c(4,"",0))
rownames(newrows) <- c("DOD 3 D0","DOD 4 D0")
colnames(newrows) <- c("Clone","Replicate","Day")
specialLayout <- rbind(defaultSetup,newrows)
temp<-getData("2015-09-17/2015-08-28 DOD 2115-2116_data plus 2 DOD d0 rerun.xls",
clones=c("1"=paste("DOD",2115),"2"=paste("DOD",2116),"3"=paste("DOD","332_2"),"4"=paste("DOD","406_2")),
colonies=c("1"=1,"2"=2,"3"="6_2","4"="2_2"),
ancestors=c("1"=paste("DOD","XXX"),"2"=paste("DOD","YYY"), "3"="DOD 72", "4"="DOD 232"),
translate=specialLayout)
temp <- temp[temp$Ancestor %in% c("DOD 232", "DOD 72"),]
View(temp)
dbDisconnect(con)
#z is the point to evaluate at
#x is the x data
#y is the y data
#i is index of the polynomial, i.e., L_k=L_i
Lk <- function(z, x, y){
sub <- rep(NA, length(x))
for(i in seq_along(sub)) sub[i]  <- y[i]*prod(z - x[-i]) / prod(x[i] - x[-i])
sum(sub)
}
#v are values to evaluate the polynomial at
#x and y are the data
lagrange  <- function(v,x,y){
if(length(x) != length(y)) return(print("Error: x and y have different lengths."))
Px <- rep(NA, length(v))
v <- sort(v)
for(i in seq_along(v)) Px[i] <- Lk(v[i],x,y)
out <- matrix(c(v, Px), ncol = 2)
out
}
### Book Figure 4.12
plot(lagrange(seq(-8,8,by=0.01), sample(-8:8), rep(0.01,17)), type="l", xlab="x", ylab="y", main = "High Order Approximation", lwd = 2, col="blue")
points(-8:8, rep(0.01,17), col="red", cex=2, pch=20)
plot(lagrange(seq(0,4,by=0.05), c(0, 2, 3, 4), c(7, 11, 28, 63)), type = "l", xlab="x", ylab="y", col="blue", lwd=2)
points(c(0, 2, 3, 4), c(7, 11, 28, 63), col="red", cex=2, pch=20)
reticulate::repl_python()
rnorm(1)
rnorm(5)
reticulate::repl_python()
reticulate::py_install("csaps")
reticulate::repl_python()
.libPaths()
reticulate::repl_python()
reticulate::repl_python()
rng = np.random
reticulate::repl_python()
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
set.seed(15697)
fish_outlier <- fish_noisy
nChanges <- 3
changeMe  <- sample(1:nrow(fish_outlier), nChanges)
CV <- var(fish_outlier$W)/mean(fish_outlier$W)
fish_outlier$W[changeMe] <- fish_outlier$W[changeMe] + rnorm(nChanges,CV)*sample(c(-1,1),nChanges,replace=T)
fish$W - fish_outlier$W #compare our final W to the original W
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
#Model two guesses
guess_2 <- with(fish, mean(W / (l*g^2)))
guess_2_n <- with(fish_noisy, mean(W / (l*g^2)))
guess_2_o <- with(fish_outlier, mean(W / (l*g^2)))
c(guess_1,guess_1_n,guess_1_o)
c(guess_2,guess_2_n,guess_2_o)
critList = [chebyshev, meanAD, medianAD, leastSq, llnorm]
chebyshev
critList = [chebyshev]
junk = [chebyshev]
junk = list([chebyshev])
junk = [np.power, np.exp]
reticulate::repl_python()
set.seed(95839)
x <- rnorm(50)
x <- c(x ,rnorm(3,5,1)) #add in some outliers
mean(x) #not near 0!
var(x)^0.5 #not near 1!
### Let's say we leave ~75% out, see how many possibilities that gives
choose(length(x), length(x)%/%4) #more than enough!!!
## Let's try it
NResamp <- 1000
resample <- replicate(NResamp, sample(x,length(x)%/%4))
hist(colMeans(resample), main = "Resampled Means", xlab = "mean")
quantile(colMeans(resample), c(0.05,0.5,0.95))
hist(diag(var(resample))^0.5, main = "Resample Variances", xlab = "variance")
quantile(diag(var(resample))^0.5, c(0.05,0.5,0.95))
length(x)
53%/%4
choose(53,13)
reticulate::repl_python()
bp4 <- lm(y ~ poly(x,4))
bp5 <- lm(y ~ poly(x,5))
bp6 <- lm(y ~ poly(x,6))
bp7 <- lm(y ~ poly(x,7))
bp8 <- lm(y ~ poly(x,8))
anova(bp4,bp5,bp6,bp7,bp8) #bp6, the sixth order polynomial, wins
summary(bp6)
plot(x,y, col = alpha("black",0.25), main="Sixth Order Polynomial Model")
points(seq(min(x),max(x),length=200), predict(bp6, data.frame(x = seq(min(x),max(x),length=200))), col="red", lwd=2, type="l")
reticulate::repl_python()
setwd("~/Dropbox/GitHub/Math438Fall2021/Chapter6")
reticulate::repl_python()
#transition matrix
B <- matrix(c(0.75, 0.05, 0.20, 0.20, 0.6, 0.2, 0.4, 0.2, 0.4), ncol = 3)
eigensys <- eigen(B)
eigensys$values #first element is lamda = 1
v1 <- eigensys$vectors[,1]
v1 / sum(v1) #make a probability, and ta-da!
B
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
X <- data.frame("Republicans"=1/3,"Democrats" = 1/3, "Independents" = 1/3)  #equal proportions
for(i in 1:100){
Xp <- as.vector(B%*%t(X[i,]))
#names(Xp) <- names(X)
X <- rbind(X, Xp)
}
matplot(X, type = "l", pch = 1:3, ylim = c(0,1), xlab="Time", ylab= "Percent in State", lty=1, lwd=2)
legend("topright", c("Republican","Democrat","Independent"), col=c("black","green","red"), lty=1)
reticulate::repl_python()
reticulate::repl_python()
state <- c("R"=300,"I"=300, "D"=300) #initial state
system <- list("state" = state, "Time" = 0)
probMass <- function(state) c(0.2*state[1], 0.05*state[1], 0.2*state[2], 0.2*state[2], 0.4*state[3], 0.2*state[3])
update <- function(theta){
with(theta,{
p <- unlist(probMass(state))
P <- cumsum(c(0,p/sum(p))) #convert to CDF by normalzing
rand <- runif(1)
rxn <- max(which(P < rand))
rxnVec <- rep(0,6)
rxnVec[rxn] <- 1
transition <- matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)
#as.vector in the next command is not necessary if you don't care about keeping a labelled vector
list(state + as.vector(transition %*% rxnVec), "Time" = Time  - log(runif(1))/sum(p))
})
}
Pol <- data.frame(t(unlist(system)))
while(max(Pol$Time) <= 7){
i <- nrow(Pol)
out <- update(list(state = Pol[i,1:3], Time = Pol$Time[i]))
Pol <- rbind(Pol, data.frame(t(unlist(out))))
}
colnames(Pol)[1:3] <- c("R","I","D")
library(ggplot2)
library(reshape2)
plotData <- melt(Pol, id = "Time", variable.name = "Party", value.name = "Count")
plotData$Fraction <- plotData$Count/900
ggplot(plotData, aes(x = Time, y = Fraction, group = Party, color = Party)) + geom_line() + theme_bw() + ggtitle("Example of Stochastic System")
View(system)
reticulate::repl_python()
reticulate::repl_python()
nrow(py$Pol)
reticulate::py$Pol
nrow(reticulate::py$Pol)
state <- c("R"=300,"I"=300, "D"=300) #initial state
system <- list("state" = state, "Time" = 0)
probMass <- function(state) c(0.2*state[1], 0.05*state[1], 0.2*state[2], 0.2*state[2], 0.4*state[3], 0.2*state[3])
update <- function(theta){
with(theta,{
p <- unlist(probMass(state))
P <- cumsum(c(0,p/sum(p))) #convert to CDF by normalzing
rand <- runif(1)
rxn <- max(which(P < rand))
rxnVec <- rep(0,6)
rxnVec[rxn] <- 1
transition <- matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)
#as.vector in the next command is not necessary if you don't care about keeping a labelled vector
list(state + as.vector(transition %*% rxnVec), "Time" = Time  - log(runif(1))/sum(p))
})
}
Pol <- data.frame(t(unlist(system)))
clock <- system.time(
while(max(Pol$Time) <= 7){
i <- nrow(Pol)
out <- update(list(state = Pol[i,1:3], Time = Pol$Time[i]))
Pol <- rbind(Pol, data.frame(t(unlist(out))))
}
)
colnames(Pol)[1:3] <- c("R","I","D")
library(ggplot2)
library(reshape2)
plotData <- melt(Pol, id = "Time", variable.name = "Party", value.name = "Count")
plotData$Fraction <- plotData$Count/900
ggplot(plotData, aes(x = Time, y = Fraction, group = Party, color = Party)) + geom_line() + theme_bw() + ggtitle("Example of Stochastic System")
clock
clock(elapse)
clock[3]
clock["elapsed"]
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
def transProb(state, variance = False): return (np.array([-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1]).reshape(3,-1,order='F')**(2**variance) @ np.diag([0.2,0.05,0.2,0.2,0.4,0.2])).sum(axis=1) * state.to_numpy().reshape(-1)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
transProb <- function(state, variance = F) colSums(t(matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)^(2^variance) %*% diag(c(0.2,0.05,0.2,0.2,0.4,0.2)))) * state
#g is the vector of the highest order of a reaction in the system
#all of our are linear so g = rep(1, 3)
update.leaping <- function(theta, pVec, epsilon = 0.03, g = rep(1,3)){
with(theta,{
mu <- transProb(state)
var <- transProb(state, T)
L <- sapply(epsilon*state/g, max, 1)
tau <- min(L/abs(mu), L^2/var)
### Now advance the chain
rxnVec <- rpois(6, unlist(probMass(state))*tau)
transition <- matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)
out <- state + as.vector(transition %*% rxnVec)
#if we get too large of a step and produce a negative value
#cut tau in half and try again
while(min(out) < 0){
tau <- tau/2
rxnVec <- rpois(6, unlist(probMass(state, ...))*tau)
out <- state + as.vector(transition %*% rxnVec)
}
list(state + as.vector(transition %*% rxnVec), "Time" = Time  + tau)
})
}
Pol2 <- data.frame(t(unlist(system)))
while(max(Pol2$Time) <= 7){
i <- nrow(Pol2)
out <- update.leaping(list(state = Pol2[i,1:3], Time = Pol2$Time[i]), c(0.2,0.05,0.2,0.2,0.4,0.2))
Pol2 <- rbind(Pol2, data.frame(t(unlist(out))))
}
colnames(Pol2)[1:3] <- c("R","I","D")
plotData <- melt(Pol2, id = "Time", variable.name = "Party", value.name = "Count")
plotData$Fraction <- plotData$Count/900
ggplot(plotData, aes(x = Time, y = Fraction, group = Party, color = Party)) + geom_line() + theme_bw() + ggtitle("Example of Stochastic System, tau leaping")
transProb <- function(state, variance = F) colSums(t(matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)^(2^variance) %*% diag(c(0.2,0.05,0.2,0.2,0.4,0.2)))) * state
#g is the vector of the highest order of a reaction in the system
#all of our are linear so g = rep(1, 3)
update.leaping <- function(theta, pVec, epsilon = 0.03, g = rep(1,3)){
with(theta,{
mu <- transProb(state)
var <- transProb(state, T)
L <- sapply(epsilon*state/g, max, 1)
tau <- min(L/abs(mu), L^2/var)
### Now advance the chain
rxnVec <- rpois(6, unlist(probMass(state))*tau)
transition <- matrix(c(-1,1,0,-1,0,1,1,-1,0,0,-1,1,1,0,-1,0,1,-1), nrow = 3)
out <- state + as.vector(transition %*% rxnVec)
#if we get too large of a step and produce a negative value
#cut tau in half and try again
while(min(out) < 0){
tau <- tau/2
rxnVec <- rpois(6, unlist(probMass(state, ...))*tau)
out <- state + as.vector(transition %*% rxnVec)
}
list(state + as.vector(transition %*% rxnVec), "Time" = Time  + tau)
})
}
Pol2 <- data.frame(t(unlist(system)))
clock2 = system.time(
while(max(Pol2$Time) <= 7){
i <- nrow(Pol2)
out <- update.leaping(list(state = Pol2[i,1:3], Time = Pol2$Time[i]), c(0.2,0.05,0.2,0.2,0.4,0.2))
Pol2 <- rbind(Pol2, data.frame(t(unlist(out))))
}
)
colnames(Pol2)[1:3] <- c("R","I","D")
plotData <- melt(Pol2, id = "Time", variable.name = "Party", value.name = "Count")
plotData$Fraction <- plotData$Count/900
ggplot(plotData, aes(x = Time, y = Fraction, group = Party, color = Party)) + geom_line() + theme_bw() + ggtitle("Example of Stochastic System, tau leaping")
