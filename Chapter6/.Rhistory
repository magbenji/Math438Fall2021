c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### next rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
#### last rerun file
temp <- getData("reruns_of_the_samples_requested/2015-10-29 re-extracted reruns 3_data.xls", translate = defaultSetup[1:7,])
actualNames <- rbind(
c("DOD 1 D0", "DOD 1489", "4_2", "1531", "5"),
c("DOD 1-1 D5", "DOD 1489", "5_2", "1532", "0"),
c("DOD 1-2 D5", "DOD 1489", "6_2", "1533", "0"),
c("DOD 1-3 D5", "DOD 1648", "3_2", "1681", "5"),
c("DOD 1-1 D8", "DOD 1642", "1_2", "1698", "0"),
c("DOD 1-2 D8", "DOD 365.507", "1_2", "2198", "5"),
c("DOD 1-3 D8", "DOD 365.507", "2_2", "2199", "5")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
View(temp)
dbWriteTable(con,"Results",temp,append=T)
dbDisconnect(con)
unique(temp$Ancestor)
which(is.na(temp$Ancestor))
temp[which(is.na(temp$Ancestor)),]
defaultSetup[1:7,]
unique(temp[,c("Ancestor","Colony")])
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 2_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 228", "6_2", "398", "0"),
c("DOD 1-1 D5", "DOD 228", "6_2", "398", "5"),
c("DOD 1-2 D5", "DOD 232", "2_2", "406", "0"),
c("DOD 1-3 D5", "DOD 232", "3_2", "407", "0"),
c("DOD 1-1 D8", "DOD 362", "1_2", "426", "0"),
c("DOD 1-2 D8", "DOD 362", "3_2", "428", "0"),
c("DOD 1-3 D8", "DOD 368", "1_2", "540", "0"),
c("DOD 2 D0", "DOD 1487", "1_2", "1508", "8"),
c("DOD 2-1 D5", "DOD 1487", "3_2", "1510", "0"),
c("DOD 2-2 D5", "DOD 1487", "5_2", "1512", "0"),
c("DOD 2-3 D5", "DOD 1487", "6_2", "1513", "0"),
c("DOD 2-1 D8", "DOD 1488", "2_2", "1519", "5"),
c("DOD 2-2 D8", "DOD 1489", "1_2", "1528", "5"),
c("DOD 2-3 D8", "DOD 1489", "1_2", "1528", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
unique(temp[,c("Ancestor","Colony")])
unique(temp[,c("Ancestor","Colony","Day")])
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
temp <- getData("reruns_of_the_samples_requested/2015-10-28 DOD re-extracted reruns 1_data.xls", translate = defaultSetup)
actualNames <- rbind(
c("DOD 1 D0", "DOD 71", "1_2", "321", "5"),
c("DOD 1-1 D5", "DOD 71", "2_2", "322", "5"),
c("DOD 1-2 D5", "DOD 71", "5_2", "325", "0"),
c("DOD 1-3 D5", "DOD 72", "1_2", "328", "5"),
c("DOD 1-1 D8", "DOD 72", "1_2", "328", "8"),
c("DOD 1-2 D8", "DOD 72", "5_2", "331", "5"),
c("DOD 1-3 D8", "DOD 73", "3_2", "335", "8"),
c("DOD 2 D0", "DOD 74", "3_2", "342", "0"),
c("DOD 2-1 D5", "DOD 74", "3_2", "342", "5"),
c("DOD 2-2 D5", "DOD 74", "3_2", "342", "8"),
c("DOD 2-3 D5", "DOD 75", "1_2", "345", "0"),
c("DOD 2-1 D8", "DOD 77", "4_2", "360", "0"),
c("DOD 2-2 D8", "DOD 78", "6_2", "368", "5"),
c("DOD 2-3 D8", "DOD 182", "4_2", "384", "8")
)
colnames(actualNames)<- c("Sample.Name","Ancestor","Colony","Clone.Number","Day")
actualValues <-data.frame(actualNames[,2:5])
rownames(actualValues) <- actualNames[,"Sample.Name"]
actualValues$Replicate <- 1
temp[,c("Ancestor","Colony","Clone.Number","Day","Replicate")] <- actualValues[temp$Sample.Name,]
nrow(unique(temp[,c("Ancestor","Colony","Day")]))
unique(temp[,c("Ancestor","Colony","Day")])
14+14+7
con<-dbConnect(SQLite(),dbname="AssaysDB.sqlite")
newrows <- rbind(c(3,"",0),c(4,"",0))
rownames(newrows) <- c("DOD 3 D0","DOD 4 D0")
colnames(newrows) <- c("Clone","Replicate","Day")
specialLayout <- rbind(defaultSetup,newrows)
temp<-getData("2015-09-17/2015-08-28 DOD 2115-2116_data plus 2 DOD d0 rerun.xls",
clones=c("1"=paste("DOD",2115),"2"=paste("DOD",2116),"3"=paste("DOD","332_2"),"4"=paste("DOD","406_2")),
colonies=c("1"=1,"2"=2,"3"="6_2","4"="2_2"),
ancestors=c("1"=paste("DOD","XXX"),"2"=paste("DOD","YYY"), "3"="DOD 72", "4"="DOD 232"),
translate=specialLayout)
temp <- temp[temp$Ancestor %in% c("DOD 232", "DOD 72"),]
View(temp)
dbDisconnect(con)
#z is the point to evaluate at
#x is the x data
#y is the y data
#i is index of the polynomial, i.e., L_k=L_i
Lk <- function(z, x, y){
sub <- rep(NA, length(x))
for(i in seq_along(sub)) sub[i]  <- y[i]*prod(z - x[-i]) / prod(x[i] - x[-i])
sum(sub)
}
#v are values to evaluate the polynomial at
#x and y are the data
lagrange  <- function(v,x,y){
if(length(x) != length(y)) return(print("Error: x and y have different lengths."))
Px <- rep(NA, length(v))
v <- sort(v)
for(i in seq_along(v)) Px[i] <- Lk(v[i],x,y)
out <- matrix(c(v, Px), ncol = 2)
out
}
### Book Figure 4.12
plot(lagrange(seq(-8,8,by=0.01), sample(-8:8), rep(0.01,17)), type="l", xlab="x", ylab="y", main = "High Order Approximation", lwd = 2, col="blue")
points(-8:8, rep(0.01,17), col="red", cex=2, pch=20)
plot(lagrange(seq(0,4,by=0.05), c(0, 2, 3, 4), c(7, 11, 28, 63)), type = "l", xlab="x", ylab="y", col="blue", lwd=2)
points(c(0, 2, 3, 4), c(7, 11, 28, 63), col="red", cex=2, pch=20)
reticulate::repl_python()
rnorm(1)
rnorm(5)
reticulate::repl_python()
reticulate::py_install("csaps")
reticulate::repl_python()
.libPaths()
reticulate::repl_python()
reticulate::repl_python()
rng = np.random
reticulate::repl_python()
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
set.seed(15697)
fish_outlier <- fish_noisy
nChanges <- 3
changeMe  <- sample(1:nrow(fish_outlier), nChanges)
CV <- var(fish_outlier$W)/mean(fish_outlier$W)
fish_outlier$W[changeMe] <- fish_outlier$W[changeMe] + rnorm(nChanges,CV)*sample(c(-1,1),nChanges,replace=T)
fish$W - fish_outlier$W #compare our final W to the original W
#Model one guesses
guess_1 <- with(fish, mean(W / l^3))
guess_1_n <- with(fish_noisy, mean(W / l^3))
guess_1_o <- with(fish_outlier, mean(W / l^3))
#Model two guesses
guess_2 <- with(fish, mean(W / (l*g^2)))
guess_2_n <- with(fish_noisy, mean(W / (l*g^2)))
guess_2_o <- with(fish_outlier, mean(W / (l*g^2)))
c(guess_1,guess_1_n,guess_1_o)
c(guess_2,guess_2_n,guess_2_o)
critList = [chebyshev, meanAD, medianAD, leastSq, llnorm]
chebyshev
critList = [chebyshev]
junk = [chebyshev]
junk = list([chebyshev])
junk = [np.power, np.exp]
reticulate::repl_python()
set.seed(95839)
x <- rnorm(50)
x <- c(x ,rnorm(3,5,1)) #add in some outliers
mean(x) #not near 0!
var(x)^0.5 #not near 1!
### Let's say we leave ~75% out, see how many possibilities that gives
choose(length(x), length(x)%/%4) #more than enough!!!
## Let's try it
NResamp <- 1000
resample <- replicate(NResamp, sample(x,length(x)%/%4))
hist(colMeans(resample), main = "Resampled Means", xlab = "mean")
quantile(colMeans(resample), c(0.05,0.5,0.95))
hist(diag(var(resample))^0.5, main = "Resample Variances", xlab = "variance")
quantile(diag(var(resample))^0.5, c(0.05,0.5,0.95))
length(x)
53%/%4
choose(53,13)
reticulate::repl_python()
setwd("~/Dropbox/GitHub/IMCI-covid-survey/src_paper_final")
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 7)
library(lavaan)
library(semPlot)
library(sjPlot)
library(officer)
surveydata<-read.csv("pathanalysisdata.csv")
#rescale cases and deaths so that they don't cause estimation problems
#colnames(surveydata)
surveydata$casesper100 <- surveydata$cases*100
surveydata$deathsper1000 <- surveydata$deaths*1000
###full data to get behavioral questions
fulldata <- read.csv(file="../data/COVID_survey_Full_120120.csv")
names(fulldata)[grep("Q6_10", names(fulldata))] <- "Q6_8" #seems to be improperly named
###merge in the behavioral data
surveydata <- merge(surveydata, fulldata[,c("ExternalReference",names(fulldata)[grep("Q[4-8]_", names(fulldata))])])
###set variables to the correct data types
###lavaan might be getting upset that these are ordinal and miscalculating things somehow
###I'm going to coment this out for now
#nList <- names(surveydata)
#orderedVars <- grepl("bool", nList) | grepl("Q[0-9]",nList)
#surveydata[,orderedVars] <- lapply(surveydata[,orderedVars],ordered)
#surveydata$state <- as.factor(surveydata$state)
surveydata$TX <- as.numeric(surveydata$state == 2)
surveydata$VT <- as.numeric(surveydata$state == 3)
surveydata<-read.csv("pathanalysisdata.csv")
#rescale cases and deaths so that they don't cause estimation problems
#colnames(surveydata)
surveydata$casesper100 <- surveydata$cases*100
surveydata$deathsper1000 <- surveydata$deaths*1000
###full data to get behavioral questions
fulldata <- read.csv(file="../data/COVID_survey_Full_120120.csv")
names(fulldata)[grep("Q6_10", names(fulldata))] <- "Q6_8" #seems to be improperly named
###merge in the behavioral data
surveydata <- merge(surveydata, fulldata[,c("ExternalReference",names(fulldata)[grep("Q[4-8]_", names(fulldata))])])
###set variables to the correct data types
###lavaan might be getting upset that these are ordinal and miscalculating things somehow
###I'm going to coment this out for now
#nList <- names(surveydata)
#orderedVars <- grepl("bool", nList) | grepl("Q[0-9]",nList)
#surveydata[,orderedVars] <- lapply(surveydata[,orderedVars],ordered)
#surveydata$state <- as.factor(surveydata$state)
surveydata$TX <- as.numeric(surveydata$state == 2)
surveydata$VT <- as.numeric(surveydata$state == 3)
surveydata<-read.csv("pathanalysisdata.csv")
View(surveydata)
names(surveydata)
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library(factoextra)
surveydata<-read.csv("../src_paper/pathanalysisdata.csv")
#rescale cases and deaths so that they don't cause estimation problems
#colnames(surveydata)
surveydata$casesper100 <- surveydata$cases*100
surveydata$deathsper1000 <- surveydata$deaths*1000
###full data to get behavioral questions
fulldata <- read.csv(file="../data/COVID_survey_Full_120120.csv")
names(fulldata)[grep("Q6_10", names(fulldata))] <- "Q6_8" #seems to be improperly named
###merge in the behavioral data
surveydata <- merge(surveydata, fulldata[,c("ExternalReference",names(fulldata)[grep("Q[4-8]_", names(fulldata))])])
names(surveydata)
trustdata<-surveydata[,c(names(surveydata)[grep("Q26_",names(surveydata))])]
trustdata<-trustdata[complete.cases(trustdata),]
trustcomponents<-prcomp(trustdata)
fviz_eig(trustcomponents)
fviz_pca_var(trustcomponents,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
trust_risk_burden_alt <- '
# latent variable definitions
trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8
health_risk =~ Q2_1+Q2_2+Q2_3+Q3_1+Q3_5+Q3_6
econ_risk =~ Q3_2+Q3_3+Q3_4+Q3_7
#behavioral breakdown
indoor_close =~ Q4_1 + Q5_1 + Q6_1 + Q7_1 + Q8_1
indoor_group =~ Q4_2 + Q5_2 + Q6_2 + Q7_2 + Q8_2
restaurant =~ Q4_3 + Q5_3 + Q6_3 + Q7_3 + Q8_3
church =~ Q4_4 + Q5_4 + Q6_4 + Q7_4 + Q8_4
shop =~ Q4_5 + Q5_5 + Q6_5 + Q7_5 + Q8_5
appointments =~ Q4_6 + Q5_6 + Q6_6 + Q7_6 + Q8_6
community =~ Q4_7 + Q5_7 + Q6_7 + Q7_7 + Q8_7
mask =~  Q5_8 + Q6_8 + Q7_8 + Q8_8
beh_int =~ indoor_close + indoor_group + restaurant + church + shop + appointments + community + mask
dis_burd =~ deathsper1000 + casesper100
# regressions
trust ~ h*ruralbool + m*malebool + whitebool + age65plusbool + b*libbool
health_risk ~ a*trust + q*ruralbool + n*malebool + whitebool + l*age65plusbool + libbool + Q26_9
econ_risk ~ c*trust +j*ruralbool + malebool + whitebool + age65plusbool + libbool + Q26_9
beh_int ~ e*econ_risk + f*health_risk + p*ruralbool + malebool + whitebool + age65plusbool + libbool
dis_burd ~ g*beh_int + k*ruralbool
T_total := a*f*g + c*e*g #trust effect on disease burden
TviaHR := a*f*g
Rur_viaTrust := h*TviaHR
Rh_total := f*g #health risk effect on disease burden
Re_total := e*g #economic risk effect on disease burden
UR_tr := h*T_total #impact of rural on burden via trust
UR_econ := j*Re_total #impact of rural on burden via economic risk
UR_beh := p*g #impact of rural on burden via behavioral intention
UR_health := q*Rh_total #impact of rural on burden via health risk perception
UR_total := UR_tr + UR_econ + UR_health+UR_beh+k #net impact of rural on burden
'
model1 <- sem(model=trust_risk_burden_alt,data=surveydata, std.ov=T)
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 7)
library(lavaan)
library(semPlot)
library(sjPlot)
library(officer)
surveydata<-read.csv("pathanalysisdata.csv")
#rescale cases and deaths so that they don't cause estimation problems
#colnames(surveydata)
surveydata$casesper100 <- surveydata$cases*100
surveydata$deathsper1000 <- surveydata$deaths*1000
###full data to get behavioral questions
fulldata <- read.csv(file="../data/COVID_survey_Full_120120.csv")
names(fulldata)[grep("Q6_10", names(fulldata))] <- "Q6_8" #seems to be improperly named
###merge in the behavioral data
surveydata <- merge(surveydata, fulldata[,c("ExternalReference",names(fulldata)[grep("Q[4-8]_", names(fulldata))])])
###set variables to the correct data types
###lavaan might be getting upset that these are ordinal and miscalculating things somehow
###I'm going to coment this out for now
#nList <- names(surveydata)
#orderedVars <- grepl("bool", nList) | grepl("Q[0-9]",nList)
#surveydata[,orderedVars] <- lapply(surveydata[,orderedVars],ordered)
#surveydata$state <- as.factor(surveydata$state)
surveydata$TX <- as.numeric(surveydata$state == 2)
surveydata$VT <- as.numeric(surveydata$state == 3)
trust_risk_burden_alt <- '
# latent variable definitions
trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8
health_risk =~ Q2_1+Q2_2+Q2_3+Q3_1+Q3_5+Q3_6
econ_risk =~ Q3_2+Q3_3+Q3_4+Q3_7
#behavioral breakdown
indoor_close =~ Q4_1 + Q5_1 + Q6_1 + Q7_1 + Q8_1
indoor_group =~ Q4_2 + Q5_2 + Q6_2 + Q7_2 + Q8_2
restaurant =~ Q4_3 + Q5_3 + Q6_3 + Q7_3 + Q8_3
church =~ Q4_4 + Q5_4 + Q6_4 + Q7_4 + Q8_4
shop =~ Q4_5 + Q5_5 + Q6_5 + Q7_5 + Q8_5
appointments =~ Q4_6 + Q5_6 + Q6_6 + Q7_6 + Q8_6
community =~ Q4_7 + Q5_7 + Q6_7 + Q7_7 + Q8_7
mask =~  Q5_8 + Q6_8 + Q7_8 + Q8_8
beh_int =~ indoor_close + indoor_group + restaurant + church + shop + appointments + community + mask
dis_burd =~ deathsper1000 + casesper100
# regressions
trust ~ h*ruralbool + m*malebool + whitebool + age65plusbool + b*libbool
health_risk ~ a*trust + q*ruralbool + n*malebool + whitebool + l*age65plusbool + libbool + Q26_9
econ_risk ~ c*trust +j*ruralbool + malebool + whitebool + age65plusbool + libbool + Q26_9
beh_int ~ e*econ_risk + f*health_risk + p*ruralbool + malebool + whitebool + age65plusbool + libbool
dis_burd ~ g*beh_int + k*ruralbool
T_total := a*f*g + c*e*g #trust effect on disease burden
TviaHR := a*f*g
Rur_viaTrust := h*TviaHR
Rh_total := f*g #health risk effect on disease burden
Re_total := e*g #economic risk effect on disease burden
UR_tr := h*T_total #impact of rural on burden via trust
UR_econ := j*Re_total #impact of rural on burden via economic risk
UR_beh := p*g #impact of rural on burden via behavioral intention
UR_health := q*Rh_total #impact of rural on burden via health risk perception
UR_total := UR_tr + UR_econ + UR_health+UR_beh+k #net impact of rural on burden
'
model1 <- sem(model=trust_risk_burden_alt,data=surveydata, std.ov=T)
trust_risk_burden_alt <- '
# latent variable definitions
trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8
health_risk =~ Q2_1+Q2_2+Q2_3+Q3_1+Q3_5+Q3_6
econ_risk =~ Q3_2+Q3_3+Q3_4+Q3_7
#behavioral breakdown
indoor_close =~ Q4_1 + Q5_1 + Q6_1 + Q7_1 + Q8_1
indoor_group =~ Q4_2 + Q5_2 + Q6_2 + Q7_2 + Q8_2
restaurant =~ Q4_3 + Q5_3 + Q6_3 + Q7_3 + Q8_3
church =~ Q4_4 + Q5_4 + Q6_4 + Q7_4 + Q8_4
shop =~ Q4_5 + Q5_5 + Q6_5 + Q7_5 + Q8_5
appointments =~ Q4_6 + Q5_6 + Q6_6 + Q7_6 + Q8_6
community =~ Q4_7 + Q5_7 + Q6_7 + Q7_7 + Q8_7
mask =~  Q5_8 + Q6_8 + Q7_8 + Q8_8
beh_int =~ indoor_close + indoor_group + restaurant + church + shop + appointments + community + mask
dis_burd =~ deathsper1000 + casesper100
# regressions
trust ~ h*ruralbool + m*malebool + whitebool + age65plusbool + b*libbool
health_risk ~ a*trust + q*ruralbool + n*malebool + whitebool + l*age65plusbool + libbool
econ_risk ~ c*trust +j*ruralbool + malebool + whitebool + age65plusbool + libbool
beh_int ~ e*econ_risk + f*health_risk + p*ruralbool + malebool + whitebool + age65plusbool + libbool
dis_burd ~ g*beh_int + k*ruralbool
T_total := a*f*g + c*e*g #trust effect on disease burden
TviaHR := a*f*g
Rur_viaTrust := h*TviaHR
Rh_total := f*g #health risk effect on disease burden
Re_total := e*g #economic risk effect on disease burden
UR_tr := h*T_total #impact of rural on burden via trust
UR_econ := j*Re_total #impact of rural on burden via economic risk
UR_beh := p*g #impact of rural on burden via behavioral intention
UR_health := q*Rh_total #impact of rural on burden via health risk perception
UR_total := UR_tr + UR_econ + UR_health+UR_beh+k #net impact of rural on burden
'
model1 <- sem(model=trust_risk_burden_alt,data=surveydata, std.ov=T)
trust_risk_burden_alt <- '
# latent variable definitions
trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8
health_risk =~ Q2_1+Q2_2+Q2_3+Q3_1+Q3_5+Q3_6
econ_risk =~ Q3_2+Q3_3+Q3_4+Q3_7
#behavioral breakdown
indoor_close =~ Q4_1 + Q5_1 + Q6_1 + Q7_1 + Q8_1
indoor_group =~ Q4_2 + Q5_2 + Q6_2 + Q7_2 + Q8_2
restaurant =~ Q4_3 + Q5_3 + Q6_3 + Q7_3 + Q8_3
church =~ Q4_4 + Q5_4 + Q6_4 + Q7_4 + Q8_4
shop =~ Q4_5 + Q5_5 + Q6_5 + Q7_5 + Q8_5
appointments =~ Q4_6 + Q5_6 + Q6_6 + Q7_6 + Q8_6
community =~ Q4_7 + Q5_7 + Q6_7 + Q7_7 + Q8_7
mask =~  Q5_8 + Q6_8 + Q7_8 + Q8_8
beh_int =~ indoor_close + indoor_group + restaurant + church + shop + appointments + community + mask
dis_burd =~ deathsper1000 + casesper100
# regressions
trust ~ h*ruralbool + m*malebool + whitebool + age65plusbool + b*libbool
health_risk ~ a*trust + q*ruralbool + n*malebool + whitebool + l*age65plusbool + libbool + Q26_9
econ_risk ~ c*trust +j*ruralbool + malebool + whitebool + age65plusbool + libbool
beh_int ~ e*econ_risk + f*health_risk + p*ruralbool + malebool + whitebool + age65plusbool + libbool
dis_burd ~ g*beh_int + k*ruralbool
T_total := a*f*g + c*e*g #trust effect on disease burden
TviaHR := a*f*g
Rur_viaTrust := h*TviaHR
Rh_total := f*g #health risk effect on disease burden
Re_total := e*g #economic risk effect on disease burden
UR_tr := h*T_total #impact of rural on burden via trust
UR_econ := j*Re_total #impact of rural on burden via economic risk
UR_beh := p*g #impact of rural on burden via behavioral intention
UR_health := q*Rh_total #impact of rural on burden via health risk perception
UR_total := UR_tr + UR_econ + UR_health+UR_beh+k #net impact of rural on burden
'
model1 <- sem(model=trust_risk_burden_alt,data=surveydata, std.ov=T)
trust_risk_burden_alt <- '
# latent variable definitions
trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8
health_risk =~ Q2_1+Q2_2+Q2_3+Q3_1+Q3_5+Q3_6
econ_risk =~ Q3_2+Q3_3+Q3_4+Q3_7
#behavioral breakdown
indoor_close =~ Q4_1 + Q5_1 + Q6_1 + Q7_1 + Q8_1
indoor_group =~ Q4_2 + Q5_2 + Q6_2 + Q7_2 + Q8_2
restaurant =~ Q4_3 + Q5_3 + Q6_3 + Q7_3 + Q8_3
church =~ Q4_4 + Q5_4 + Q6_4 + Q7_4 + Q8_4
shop =~ Q4_5 + Q5_5 + Q6_5 + Q7_5 + Q8_5
appointments =~ Q4_6 + Q5_6 + Q6_6 + Q7_6 + Q8_6
community =~ Q4_7 + Q5_7 + Q6_7 + Q7_7 + Q8_7
mask =~  Q5_8 + Q6_8 + Q7_8 + Q8_8
beh_int =~ indoor_close + indoor_group + restaurant + church + shop + appointments + community + mask
dis_burd =~ deathsper1000 + casesper100
# regressions
trust ~ h*ruralbool + m*malebool + whitebool + age65plusbool + b*libbool
health_risk ~ a*trust + q*ruralbool + n*malebool + whitebool + l*age65plusbool + libbool
econ_risk ~ c*trust +j*ruralbool + malebool + whitebool + age65plusbool + libbool + Q26_9
beh_int ~ e*econ_risk + f*health_risk + p*ruralbool + malebool + whitebool + age65plusbool + libbool
dis_burd ~ g*beh_int + k*ruralbool
T_total := a*f*g + c*e*g #trust effect on disease burden
TviaHR := a*f*g
Rur_viaTrust := h*TviaHR
Rh_total := f*g #health risk effect on disease burden
Re_total := e*g #economic risk effect on disease burden
UR_tr := h*T_total #impact of rural on burden via trust
UR_econ := j*Re_total #impact of rural on burden via economic risk
UR_beh := p*g #impact of rural on burden via behavioral intention
UR_health := q*Rh_total #impact of rural on burden via health risk perception
UR_total := UR_tr + UR_econ + UR_health+UR_beh+k #net impact of rural on burden
'
model1 <- sem(model=trust_risk_burden_alt,data=surveydata, std.ov=T)
View(surveydata)
fit <- cfa('trust =~ Q26_1+Q26_2+Q26_3 + Q26_5+Q26_6+Q26_7+Q26_8', data = surveydata)
summary(fit)
pred(fit)
predict(fit)
dim(predict(fit))
preds <- predict(fit)
preds$
attr(preds)
preds
View(preds)
surveydata$Q26_9
sum(is.na(surveydata$Q26_9)
)
x <- runif(100,0,10)
y <- rnorm(100, 3*x + 2, 3)
plot(x,y)
chain <- c("slope"=0,"intercept"=0) #initialize chain
Chain <- data.frame(t(chain))
proposal <- function(theta, sd = 0.1) rnorm(length(theta),theta,sd)
ll_theta <- function(theta, x, y) sum(dnorm(x*theta[1]+theta[2], y,log=T))
nSteps <- 1000
for(i in 1:nSteps){
old <- unlist(Chain[i,])
new <- proposal(old)
log_alpha <- ll_theta(new,x,y) - ll_theta(old,x,y)
next_prop <- if(log(runif(1)) > log_alpha) old else new
Chain <- rbind(Chain,next_prop)
}
Chain$Iteration <- seq_len(nrow(Chain))
###plot the chain values
plot(Chain)
###still see significant autocorrelation for the intercept, iterate more
Chain$Iteration <- NULL
for(i in nrow(Chain):(nrow(Chain) + 1000)){
old <- unlist(Chain[i,])
new <- proposal(old)
log_alpha <- ll_theta(new,x,y) - ll_theta(old,x,y)
next_prop <- if(log(runif(1)) > log_alpha) old else new
Chain <- rbind(Chain,next_prop)
}
Chain$Iteration <- seq_len(nrow(Chain))
plot(Chain)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
