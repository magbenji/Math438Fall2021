nx.draw(dirgraphx, xycoords, with_labels = True)
nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
_ = 3
_
del _
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
import igraph as ig
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
gx.nodes()
gx.edges()
np.array(gx.nodes()).size
np.array(gx.edges()).size
g = ig.Graph.Formula('A-1, A-2, A-4, B-1, B-2, C-1, C-4, D-3, D-4')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
nx.is_bipartite(gx)
X, Y = nx.bipartite.sets(gx)
X = dict.fromkeys(X, 0)
Y = dict.fromkeys(Y, 1)
nx.set_node_attributes(gx,X,"bipartite")
nx.set_node_attributes(gx,Y,"bipartite")
gx.nodes['A']
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
group_0_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 0]
group_1_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 1]
pos = nx.bipartite_layout(gx, X)
nx.draw_networkx_nodes(gx, pos, nodelist=group_0_nodes, node_color='red', node_shape='s')
nx.draw_networkx_nodes(gx, pos, nodelist=group_1_nodes, node_color='blue', node_shape='o')
nx.draw_networkx_edges(gx, pos)
nx.draw_networkx_labels(gx, pos)
plt.show()
plt.close()
nx.adjacency_matrix(gx).todense()
max_match = nx.bipartite.maximum_matching(gx)
max_match
nx.is_maximal_matching(gx, {'B':'2', 'D':'3', 'C':'4', 'A':'1'}) #check a different match
dirgraph = ig.Graph.Formula('s->A:B:C:D, A->1:2:4, B->1:2, C->1:4, D->3:4, 1:2:3:4->t')
dirgraphx = dirgraph.to_networkx()
dirgraphx = nx.relabel_nodes(dirgraphx, nx.get_node_attributes(dirgraphx, 'name'))
nx.draw(dirgraphx, with_labels = True)
plt.show()
plt.close()
xycoords = {list(dirgraphx.nodes())[k]: dirgraph.layout_sugiyama().coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi = dirgraph.layout_sugiyama()
sugi.mirror(1) #mirror on y axis
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi.rotate(90)
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
nx.set_edge_attributes(dirgraphx, 1, 'capacity') #need to have the edge capacities set in networkx
mf_result = nx.maximum_flow(dirgraphx, 's', 't')
print(mf_result)
max_graphx = dirgraphx.copy()
for k,v in mf_result[1].items():
for k2, v2 in v.items():
if v2 == 0: max_graphx.remove_edge(k, k2)
nx.draw(max_graphx, xycoords, with_labels = True)
plt.show()
plt.close()
max_graphx.remove_nodes_from(['s','t'])
nx.is_maximal_matching(max_graphx.to_undirected(), {'D':'3','C':'1','A':'4','B':'2'}) #note the conversion to an undirected graph
nx.degree(dirgraphx)
nx.degree_histogram(dirgraphx) #degree distribution
nx.floyd_warshall_numpy(dirgraphx) #all shortest pairwise vertex distances
nx.floyd_warshall_numpy(dirgraphx.to_undirected()) #undirected graph for comparison
nx.shortest_path(dirgraphx,'s','4') # specific shortest path from s -> 4.
nx.shortest_path_length(dirgraphx,'s','4') # length of the shortest path
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
g = ig.Graph.Formula('v1-v5, v1-v3, v5-v2, v5-v6, v3-v6, v6-v4, v4-v7, v6-v7, v7-v8, v8-v2')
gx = g.to_networkx()
gx = nx.relabel(gx,nx.get_node_attributes(gx,'name'))
gx = nx.relabel_nodes(gx,nx.get_node_attributes(gx,'name'))
gx
gx.nodes()
nx.algorithms.approximation.min_weighted_vertex_cover(gx)
nx.algorithms.approximation.min_weighted_vertex_cover(gx, weight=None)
nx.draw(gx)
plt.show()
plt.close()
from networkx.algorithms.approximation import vertex_cover
vertex_cover.min_weighted_vertex_cover(gx)
bob = vertex_cover.min_weighted_vertex_cover(gx)
bob
print(vertex_cover.min_weighted_vertex_cover(gx))
from networkx.algorithms.approximation import clique
clique.maximum_independent_set(gx)
clique.max_clique(gx)
ig.VertexCover(g)
ig.VertexCover(g).vs
bob = ig.VertexCover(g)
bob.membership
bob.n
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
nx.maximal_independent_set(gx)
g.maximal_independent_vertex_sets()
g.largest_independent_vertex_sets()
g.vs
list(g.vs)
g.vs['name']
g.vs['name'][0,2,4]
g.vs['name']np.arry([0,2,4])
g.vs['name']np.array([0,2,4])
np.array(g.vs['name'])np.array([0,2,4])
np.array(g.vs['name'])[0,2,4]
np.array(g.vs['name'])[[0,2,4]]
g.vs['name'][g.largest_independent_vertex_sets()]
g.largest_independent_vertex_sets()
g.largest_independent_vertex_sets()[0]
np.toarray(g.largest_independent_vertex_sets()[0])
np.to_array(g.largest_independent_vertex_sets()[0])
np.numpyarray(g.largest_independent_vertex_sets()[0])
np.array(g.largest_independent_vertex_sets()[0])
g.vs['name'][np.array(g.largest_independent_vertex_sets()[0])]
[np.array(g.largest_independent_vertex_sets()[0])]
np.array(g.largest_independent_vertex_sets()[0])
g.largest_independent_vertex_sets()[0]
g.largest_independent_vertex_sets()[0][0]
[x for x in g.largest_independent_vertex_sets()]
[x for x in g.largest_independent_vertex_sets()[0]]
[g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
g.largest_independent_vertex_sets()
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[3]]
np.setdiff1d(g.vs['name'], livs)
import igraph as ig
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
gx.nodes()
gx.edges()
np.array(gx.nodes()).size
np.array(gx.edges()).size
g = ig.Graph.Formula('A-1, A-2, A-4, B-1, B-2, C-1, C-4, D-3, D-4')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
nx.is_bipartite(gx)
X, Y = nx.bipartite.sets(gx)
X = dict.fromkeys(X, 0)
Y = dict.fromkeys(Y, 1)
nx.set_node_attributes(gx,X,"bipartite")
nx.set_node_attributes(gx,Y,"bipartite")
gx.nodes['A']
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
group_0_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 0]
group_1_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 1]
pos = nx.bipartite_layout(gx, X)
nx.draw_networkx_nodes(gx, pos, nodelist=group_0_nodes, node_color='red', node_shape='s')
nx.draw_networkx_nodes(gx, pos, nodelist=group_1_nodes, node_color='blue', node_shape='o')
nx.draw_networkx_edges(gx, pos)
nx.draw_networkx_labels(gx, pos)
plt.show()
plt.close()
nx.adjacency_matrix(gx).todense()
max_match = nx.bipartite.maximum_matching(gx)
max_match
nx.is_maximal_matching(gx, {'B':'2', 'D':'3', 'C':'4', 'A':'1'}) #check a different match
dirgraph = ig.Graph.Formula('s->A:B:C:D, A->1:2:4, B->1:2, C->1:4, D->3:4, 1:2:3:4->t')
dirgraphx = dirgraph.to_networkx()
dirgraphx = nx.relabel_nodes(dirgraphx, nx.get_node_attributes(dirgraphx, 'name'))
nx.draw(dirgraphx, with_labels = True)
plt.show()
plt.close()
xycoords = {list(dirgraphx.nodes())[k]: dirgraph.layout_sugiyama().coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi = dirgraph.layout_sugiyama()
sugi.mirror(1) #mirror on y axis
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi.rotate(90)
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
nx.set_edge_attributes(dirgraphx, 1, 'capacity') #need to have the edge capacities set in networkx
mf_result = nx.maximum_flow(dirgraphx, 's', 't')
print(mf_result)
max_graphx = dirgraphx.copy()
for k,v in mf_result[1].items():
for k2, v2 in v.items():
if v2 == 0: max_graphx.remove_edge(k, k2)
nx.draw(max_graphx, xycoords, with_labels = True)
plt.show()
plt.close()
max_graphx.remove_nodes_from(['s','t'])
nx.is_maximal_matching(max_graphx.to_undirected(), {'D':'3','C':'1','A':'4','B':'2'}) #note the conversion to an undirected graph
#networkx doesn't have the largest independent vertex set command us iGraph
g = ig.Graph.Formula('v1-v5, v1-v3, v5-v2, v5-v6, v3-v6, v6-v4, v4-v7, v6-v7, v7-v8, v8-v2') #this is figure 8.20 in the book
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
g.largest_independent_vertex_sets() #our graph has many largest independent vertex sets, just pick one (index = 3) and look at the minimum vertex cover
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[3]]
np.setdiff1d(g.vs['name'], livs)
nx.degree(dirgraphx)
nx.degree_histogram(dirgraphx) #degree distribution
nx.floyd_warshall_numpy(dirgraphx) #all shortest pairwise vertex distances
nx.floyd_warshall_numpy(dirgraphx.to_undirected()) #undirected graph for comparison
nx.shortest_path(dirgraphx,'s','4') # specific shortest path from s -> 4.
nx.shortest_path_length(dirgraphx,'s','4') # length of the shortest path
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
import igraph as ig
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
gx.nodes()
gx.edges()
gx.nodes['A'] #lookup a node
gx.edges['A']['D'] #lookup an edge
np.array(gx.nodes()).size
np.array(gx.edges()).size
gx['A']['D'] #lookup an edge
import igraph as ig
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
gx.nodes()
gx.edges()
gx.nodes['A'] #lookup a node
gx['A']['D'] #lookup an edge
np.array(gx.nodes()).size
np.array(gx.edges()).size
g = ig.Graph.Formula('A-1, A-2, A-4, B-1, B-2, C-1, C-4, D-3, D-4')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
nx.is_bipartite(gx)
X, Y = nx.bipartite.sets(gx) #divide the graph into the 2 partitions X, Y
X = dict.fromkeys(X, 0) #dictionary needed for setting attributes for vertices in X
Y = dict.fromkeys(Y, 1) #dictionary needed for setting attributes for vertices in Y
#set attributes for nodes like so:
nx.set_node_attributes(gx,X,"bipartite")
nx.set_node_attributes(gx,Y,"bipartite")
gx.nodes['A'] #take a look at node A, it now has an attribute for bipartite
group_0_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 0]
group_1_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 1]
#In order to get 2 shapes, you have plot the nodes separately
pos = nx.bipartite_layout(gx, X)
nx.draw_networkx_nodes(gx, pos, nodelist=group_0_nodes, node_color='red', node_shape='s')
nx.draw_networkx_nodes(gx, pos, nodelist=group_1_nodes, node_color='blue', node_shape='o')
nx.draw_networkx_edges(gx, pos)
nx.draw_networkx_labels(gx, pos)
plt.show()
plt.close()
nx.adjacency_matrix(gx).todense()
max_match = nx.bipartite.maximum_matching(gx)
max_match
nx.is_maximal_matching(gx, {'B':'2', 'D':'3', 'C':'4', 'A':'1'}) #check a different match
dirgraph = ig.Graph.Formula('s->A:B:C:D, A->1:2:4, B->1:2, C->1:4, D->3:4, 1:2:3:4->t')
dirgraphx = dirgraph.to_networkx()
dirgraphx = nx.relabel_nodes(dirgraphx, nx.get_node_attributes(dirgraphx, 'name'))
nx.draw(dirgraphx, with_labels = True)
plt.show()
plt.close()
xycoords = {list(dirgraphx.nodes())[k]: dirgraph.layout_sugiyama().coords[k] for k in range(10)} #this creates a dictionary that looks like {n_1:[x_1,y_1], n_2:[x_2,y_2]...}
xycoords
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi = dirgraph.layout_sugiyama()
sugi.mirror(1) #mirror on y axis
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi.rotate(90) #90 degree rotation
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
nx.set_edge_attributes(dirgraphx, 1, 'capacity') #need to have the edge capacities set in networkx
mf_result = nx.maximum_flow(dirgraphx, 's', 't')
print(mf_result)
max_graphx = dirgraphx.copy()
for k,v in mf_result[1].items():
for k2, v2 in v.items():
if v2 == 0: max_graphx.remove_edge(k, k2)
nx.draw(max_graphx, xycoords, with_labels = True)
plt.show()
plt.close()
max_graphx.remove_nodes_from(['s','t'])
nx.is_maximal_matching(max_graphx.to_undirected(), {'D':'3','C':'1','A':'4','B':'2'}) #note the conversion to an undirected graph
#networkx doesn't have the largest independent vertex set command us iGraph
g = ig.Graph.Formula('v1-v5, v1-v3, v5-v2, v5-v6, v3-v6, v6-v4, v4-v7, v6-v7, v7-v8, v8-v2') #this is figure 8.20 in the book
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
g.largest_independent_vertex_sets() #our graph has many largest independent vertex sets, just pick one (index = 3) and look at the minimum vertex cover
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[3]]
np.setdiff1d(g.vs['name'], livs)
#networkx doesn't have the largest independent vertex set command us iGraph
g = ig.Graph.Formula('v1-v5, v1-v3, v5-v2, v5-v6, v3-v6, v6-v4, v4-v7, v6-v7, v7-v8, v8-v2') #this is figure 8.20 in the book
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
g.largest_independent_vertex_sets() #our graph has many largest independent vertex sets, just pick one (index = 3) and look at the minimum vertex cover
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[3]]
np.setdiff1d(g.vs['name'], livs)
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
dirgraphx['D']['3']
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
np.math.factorial(3)
np.math.factorial(8)
import igraph as ig
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
gx.nodes()
gx.edges()
gx.nodes['A'] #lookup a node
gx['A']['D'] #lookup an edge
np.array(gx.nodes()).size
np.array(gx.edges()).size
g = ig.Graph.Formula('A-1, A-2, A-4, B-1, B-2, C-1, C-4, D-3, D-4')
gx = nx.Graph(g.to_networkx())
gx = nx.relabel_nodes(gx, nx.get_node_attributes(gx,'name'))
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
nx.is_bipartite(gx)
X, Y = nx.bipartite.sets(gx) #divide the graph into the 2 partitions X, Y
X = dict.fromkeys(X, 0) #dictionary needed for setting attributes for vertices in X
Y = dict.fromkeys(Y, 1) #dictionary needed for setting attributes for vertices in Y
#set attributes for nodes like so:
nx.set_node_attributes(gx,X,"bipartite")
nx.set_node_attributes(gx,Y,"bipartite")
gx.nodes['A'] #take a look at node A, it now has an attribute for bipartite
nx.draw(gx, with_labels = True)
plt.show()
plt.close()
group_0_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 0]
group_1_nodes = [n for (n,group) in nx.get_node_attributes(gx,'bipartite').items() if group == 1]
#In order to get 2 shapes, you have plot the nodes separately
pos = nx.bipartite_layout(gx, X)
nx.draw_networkx_nodes(gx, pos, nodelist=group_0_nodes, node_color='red', node_shape='s')
nx.draw_networkx_nodes(gx, pos, nodelist=group_1_nodes, node_color='blue', node_shape='o')
nx.draw_networkx_edges(gx, pos)
nx.draw_networkx_labels(gx, pos)
plt.show()
plt.close()
nx.adjacency_matrix(gx).todense()
max_match = nx.bipartite.maximum_matching(gx)
max_match
nx.is_maximal_matching(gx, {'B':'2', 'D':'3', 'C':'4', 'A':'1'}) #check a different match
dirgraph = ig.Graph.Formula('s->A:B:C:D, A->1:2:4, B->1:2, C->1:4, D->3:4, 1:2:3:4->t')
dirgraphx = dirgraph.to_networkx()
dirgraphx = nx.relabel_nodes(dirgraphx, nx.get_node_attributes(dirgraphx, 'name'))
nx.draw(dirgraphx, with_labels = True)
plt.show()
plt.close()
xycoords = {list(dirgraphx.nodes())[k]: dirgraph.layout_sugiyama().coords[k] for k in range(10)} #this creates a dictionary that looks like {n_1:[x_1,y_1], n_2:[x_2,y_2]...}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi = dirgraph.layout_sugiyama()
sugi.mirror(1) #mirror on y axis
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
sugi.rotate(90) #90 degree rotation
xycoords = {list(dirgraphx.nodes())[k]: sugi.coords[k] for k in range(10)}
nx.draw(dirgraphx, pos = xycoords, with_labels = True) #top to bottom
plt.show()
plt.close()
nx.set_edge_attributes(dirgraphx, 1, 'capacity') #need to have the edge capacities set in networkx
mf_result = nx.maximum_flow(dirgraphx, 's', 't')
print(mf_result)
max_graphx = dirgraphx.copy()
for k,v in mf_result[1].items():
for k2, v2 in v.items():
if v2 == 0: max_graphx.remove_edge(k, k2)
nx.draw(max_graphx, xycoords, with_labels = True)
plt.show()
plt.close()
max_graphx.remove_nodes_from(['s','t'])
nx.is_maximal_matching(max_graphx.to_undirected(), {'D':'3','C':'1','A':'4','B':'2'}) #note the conversion to an undirected graph
#networkx doesn't have the largest independent vertex set command us iGraph
g = ig.Graph.Formula('v1-v5, v1-v3, v5-v2, v5-v6, v3-v6, v6-v4, v4-v7, v6-v7, v7-v8, v8-v2') #this is figure 8.20 in the book
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[0]]
np.setdiff1d(g.vs['name'], livs)
#use the igraph method for creation
g = ig.Graph.Formula('A-B-C-D-A, E-A:B:C:D, F-G-H-I-F, J-F:G:H:I, K-L-M-N-K, O-K:L:M:N, P-Q-R-S-P, T-P:Q:R:S, B-F, E-J, C-I, L-T, O-T, M-S, C-P, C-L, I-L, I-P')
g.largest_independent_vertex_sets() #our graph has many largest independent vertex sets, just pick one (index = 3) and look at the minimum vertex cover
livs = [g.vs['name'][x] for x in g.largest_independent_vertex_sets()[3]]
np.setdiff1d(g.vs['name'], livs)
nx.degree(dirgraphx)
nx.degree_histogram(dirgraphx) #degree distribution
nx.floyd_warshall_numpy(dirgraphx) #all shortest pairwise vertex distances
nx.floyd_warshall_numpy(dirgraphx.to_undirected()) #undirected graph for comparison
nx.shortest_path(dirgraphx,'s','4') # specific shortest path from s -> 4.
nx.shortest_path_length(dirgraphx,'s','4') # length of the shortest path
dirgraphx.edges()
e_weights = dict(zip(list(dirgraphx.edges()), np.concatenate(([1,1,1,1],np.repeat(3,9),[1,1,1,1]))))
nx.set_edge_attributes(dirgraphx, e_weights , 'weight')
nx.is_weighted(dirgraphx)
dirgraphx['D']['3'] #note the edges now attributes! this is the edge D -> 3
nx.draw(dirgraphx, xycoords, with_labels = True)
junk = nx.draw_networkx_edge_labels(dirgraphx, xycoords, edge_labels = nx.get_edge_attributes(dirgraphx, 'weight'))
plt.show()
plt.close()
reticulate::repl_python()
